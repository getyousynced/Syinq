import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Provides a Cloudflare Access Mutual TLS Certificate Settings resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.AccessMutualTlsHostnameSettings("example", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     settings: [{
 *         hostname: "example.com",
 *         clientCertificateForwarding: true,
 *         chinaNetwork: false,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Account level mTLS hostname settings import.
 *
 * ```sh
 * $ pulumi import cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings example account/<account_id>
 * ```
 *
 * Zone level mTLS hostname settings import.
 *
 * ```sh
 * $ pulumi import cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings example zone/<zone_id>
 * ```
 */
export declare class AccessMutualTlsHostnameSettings extends pulumi.CustomResource {
    /**
     * Get an existing AccessMutualTlsHostnameSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessMutualTlsHostnameSettingsState, opts?: pulumi.CustomResourceOptions): AccessMutualTlsHostnameSettings;
    /**
     * Returns true if the given object is an instance of AccessMutualTlsHostnameSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is AccessMutualTlsHostnameSettings;
    /**
     * The account identifier to target for the resource.
     */
    readonly accountId: pulumi.Output<string | undefined>;
    readonly settings: pulumi.Output<outputs.AccessMutualTlsHostnameSettingsSetting[] | undefined>;
    /**
     * The zone identifier to target for the resource.
     */
    readonly zoneId: pulumi.Output<string | undefined>;
    /**
     * Create a AccessMutualTlsHostnameSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccessMutualTlsHostnameSettingsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering AccessMutualTlsHostnameSettings resources.
 */
export interface AccessMutualTlsHostnameSettingsState {
    /**
     * The account identifier to target for the resource.
     */
    accountId?: pulumi.Input<string>;
    settings?: pulumi.Input<pulumi.Input<inputs.AccessMutualTlsHostnameSettingsSetting>[]>;
    /**
     * The zone identifier to target for the resource.
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a AccessMutualTlsHostnameSettings resource.
 */
export interface AccessMutualTlsHostnameSettingsArgs {
    /**
     * The account identifier to target for the resource.
     */
    accountId?: pulumi.Input<string>;
    settings?: pulumi.Input<pulumi.Input<inputs.AccessMutualTlsHostnameSettingsSetting>[]>;
    /**
     * The zone identifier to target for the resource.
     */
    zoneId?: pulumi.Input<string>;
}
