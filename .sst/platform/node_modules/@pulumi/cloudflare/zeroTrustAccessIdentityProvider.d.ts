import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Provides a Cloudflare Access Identity Provider resource. Identity
 * Providers are used as an authentication or authorisation source
 * within Access.
 *
 * > It's required that an `accountId` or `zoneId` is provided and in
 *    most cases using either is fine. However, if you're using a scoped
 *    access token, you must provide the argument that matches the token's
 *    scope. For example, an access token that is scoped to the "example.com"
 *    zone needs to use the `zoneId` argument.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * // one time pin
 * const pinLogin = new cloudflare.ZeroTrustAccessIdentityProvider("pin_login", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "PIN login",
 *     type: "onetimepin",
 * });
 * // oauth
 * const githubOauth = new cloudflare.ZeroTrustAccessIdentityProvider("github_oauth", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "GitHub OAuth",
 *     type: "github",
 *     configs: [{
 *         clientId: "example",
 *         clientSecret: "secret_key",
 *     }],
 * });
 * // saml
 * const jumpcloudSaml = new cloudflare.ZeroTrustAccessIdentityProvider("jumpcloud_saml", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "JumpCloud SAML",
 *     type: "saml",
 *     configs: [{
 *         issuerUrl: "jumpcloud",
 *         ssoTargetUrl: "https://sso.myexample.jumpcloud.com/saml2/cloudflareaccess",
 *         attributes: [
 *             "email",
 *             "username",
 *         ],
 *         signRequest: false,
 *         idpPublicCert: `MIIDpDCCAoygAwIBAgIGAV2ka+55MA0GCSqGSIb3DQEBCwUAMIGSMQswCQ...GF/Q2/MHadws97cZg
 * uTnQyuOqPuHbnN83d/2l1NSYKCbHt24o`,
 *     }],
 * });
 * // okta
 * const okta = new cloudflare.ZeroTrustAccessIdentityProvider("okta", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "Okta",
 *     type: "okta",
 *     configs: [{
 *         clientId: "example",
 *         clientSecret: "secret_key",
 *         apiToken: "okta_api_token",
 *         oktaAccount: "https://example.com",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustAccessIdentityProvider:ZeroTrustAccessIdentityProvider example <account_id>/<identity_provider_id>
 * ```
 */
export declare class ZeroTrustAccessIdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustAccessIdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustAccessIdentityProviderState, opts?: pulumi.CustomResourceOptions): ZeroTrustAccessIdentityProvider;
    /**
     * Returns true if the given object is an instance of ZeroTrustAccessIdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ZeroTrustAccessIdentityProvider;
    /**
     * The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
     */
    readonly accountId: pulumi.Output<string | undefined>;
    /**
     * Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
     */
    readonly configs: pulumi.Output<outputs.ZeroTrustAccessIdentityProviderConfig[]>;
    /**
     * Friendly name of the Access Identity Provider configuration.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Configuration for SCIM settings for a given IDP.
     */
    readonly scimConfigs: pulumi.Output<outputs.ZeroTrustAccessIdentityProviderScimConfig[]>;
    /**
     * The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
     */
    readonly type: pulumi.Output<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
     */
    readonly zoneId: pulumi.Output<string | undefined>;
    /**
     * Create a ZeroTrustAccessIdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustAccessIdentityProviderArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ZeroTrustAccessIdentityProvider resources.
 */
export interface ZeroTrustAccessIdentityProviderState {
    /**
     * The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
     */
    accountId?: pulumi.Input<string>;
    /**
     * Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
     */
    configs?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessIdentityProviderConfig>[]>;
    /**
     * Friendly name of the Access Identity Provider configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration for SCIM settings for a given IDP.
     */
    scimConfigs?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessIdentityProviderScimConfig>[]>;
    /**
     * The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
     */
    type?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ZeroTrustAccessIdentityProvider resource.
 */
export interface ZeroTrustAccessIdentityProviderArgs {
    /**
     * The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
     */
    accountId?: pulumi.Input<string>;
    /**
     * Provider configuration from the [developer documentation](https://developers.cloudflare.com/access/configuring-identity-providers/).
     */
    configs?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessIdentityProviderConfig>[]>;
    /**
     * Friendly name of the Access Identity Provider configuration.
     */
    name: pulumi.Input<string>;
    /**
     * Configuration for SCIM settings for a given IDP.
     */
    scimConfigs?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessIdentityProviderScimConfig>[]>;
    /**
     * The provider type to use. Available values: `azureAD`, `centrify`, `facebook`, `github`, `google`, `google-apps`, `linkedin`, `oidc`, `okta`, `onelogin`, `onetimepin`, `pingone`, `saml`, `yandex`.
     */
    type: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId?: pulumi.Input<string>;
}
