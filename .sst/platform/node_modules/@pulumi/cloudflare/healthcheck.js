"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Healthcheck = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Standalone Health Checks provide a way to monitor origin servers
 * without needing a Cloudflare Load Balancer.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * // HTTPS Healthcheck
 * const httpHealthCheck = new cloudflare.Healthcheck("http_health_check", {
 *     zoneId: cloudflareZoneId,
 *     name: "http-health-check",
 *     description: "example http health check",
 *     address: "example.com",
 *     suspended: false,
 *     checkRegions: [
 *         "WEU",
 *         "EEU",
 *     ],
 *     type: "HTTPS",
 *     port: 443,
 *     method: "GET",
 *     path: "/health",
 *     expectedBody: "alive",
 *     expectedCodes: [
 *         "2xx",
 *         "301",
 *     ],
 *     followRedirects: true,
 *     allowInsecure: false,
 *     headers: [{
 *         header: "Host",
 *         values: ["example.com"],
 *     }],
 *     timeout: 10,
 *     retries: 2,
 *     interval: 60,
 *     consecutiveFails: 3,
 *     consecutiveSuccesses: 2,
 * });
 * // TCP Healthcheck
 * const tcpHealthCheck = new cloudflare.Healthcheck("tcp_health_check", {
 *     zoneId: cloudflareZoneId,
 *     name: "tcp-health-check",
 *     description: "example tcp health check",
 *     address: "example.com",
 *     suspended: false,
 *     checkRegions: [
 *         "WEU",
 *         "EEU",
 *     ],
 *     type: "TCP",
 *     port: 22,
 *     method: "connection_established",
 *     timeout: 10,
 *     retries: 2,
 *     interval: 60,
 *     consecutiveFails: 3,
 *     consecutiveSuccesses: 2,
 * });
 * ```
 *
 * ## Import
 *
 * Use the Zone ID and Healthcheck ID to import.
 *
 * ```sh
 * $ pulumi import cloudflare:index/healthcheck:Healthcheck example <zone_id>/<healthcheck_id>
 * ```
 */
class Healthcheck extends pulumi.CustomResource {
    /**
     * Get an existing Healthcheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Healthcheck(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Healthcheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Healthcheck.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["allowInsecure"] = state ? state.allowInsecure : undefined;
            resourceInputs["checkRegions"] = state ? state.checkRegions : undefined;
            resourceInputs["consecutiveFails"] = state ? state.consecutiveFails : undefined;
            resourceInputs["consecutiveSuccesses"] = state ? state.consecutiveSuccesses : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expectedBody"] = state ? state.expectedBody : undefined;
            resourceInputs["expectedCodes"] = state ? state.expectedCodes : undefined;
            resourceInputs["followRedirects"] = state ? state.followRedirects : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["allowInsecure"] = args ? args.allowInsecure : undefined;
            resourceInputs["checkRegions"] = args ? args.checkRegions : undefined;
            resourceInputs["consecutiveFails"] = args ? args.consecutiveFails : undefined;
            resourceInputs["consecutiveSuccesses"] = args ? args.consecutiveSuccesses : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expectedBody"] = args ? args.expectedBody : undefined;
            resourceInputs["expectedCodes"] = args ? args.expectedCodes : undefined;
            resourceInputs["followRedirects"] = args ? args.followRedirects : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["suspended"] = args ? args.suspended : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Healthcheck.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Healthcheck = Healthcheck;
/** @internal */
Healthcheck.__pulumiType = 'cloudflare:index/healthcheck:Healthcheck';
//# sourceMappingURL=healthcheck.js.map