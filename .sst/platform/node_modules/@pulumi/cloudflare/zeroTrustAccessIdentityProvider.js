"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroTrustAccessIdentityProvider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Cloudflare Access Identity Provider resource. Identity
 * Providers are used as an authentication or authorisation source
 * within Access.
 *
 * > It's required that an `accountId` or `zoneId` is provided and in
 *    most cases using either is fine. However, if you're using a scoped
 *    access token, you must provide the argument that matches the token's
 *    scope. For example, an access token that is scoped to the "example.com"
 *    zone needs to use the `zoneId` argument.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * // one time pin
 * const pinLogin = new cloudflare.ZeroTrustAccessIdentityProvider("pin_login", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "PIN login",
 *     type: "onetimepin",
 * });
 * // oauth
 * const githubOauth = new cloudflare.ZeroTrustAccessIdentityProvider("github_oauth", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "GitHub OAuth",
 *     type: "github",
 *     configs: [{
 *         clientId: "example",
 *         clientSecret: "secret_key",
 *     }],
 * });
 * // saml
 * const jumpcloudSaml = new cloudflare.ZeroTrustAccessIdentityProvider("jumpcloud_saml", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "JumpCloud SAML",
 *     type: "saml",
 *     configs: [{
 *         issuerUrl: "jumpcloud",
 *         ssoTargetUrl: "https://sso.myexample.jumpcloud.com/saml2/cloudflareaccess",
 *         attributes: [
 *             "email",
 *             "username",
 *         ],
 *         signRequest: false,
 *         idpPublicCert: `MIIDpDCCAoygAwIBAgIGAV2ka+55MA0GCSqGSIb3DQEBCwUAMIGSMQswCQ...GF/Q2/MHadws97cZg
 * uTnQyuOqPuHbnN83d/2l1NSYKCbHt24o`,
 *     }],
 * });
 * // okta
 * const okta = new cloudflare.ZeroTrustAccessIdentityProvider("okta", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "Okta",
 *     type: "okta",
 *     configs: [{
 *         clientId: "example",
 *         clientSecret: "secret_key",
 *         apiToken: "okta_api_token",
 *         oktaAccount: "https://example.com",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustAccessIdentityProvider:ZeroTrustAccessIdentityProvider example <account_id>/<identity_provider_id>
 * ```
 */
class ZeroTrustAccessIdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustAccessIdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ZeroTrustAccessIdentityProvider(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ZeroTrustAccessIdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustAccessIdentityProvider.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["configs"] = state ? state.configs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scimConfigs"] = state ? state.scimConfigs : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["configs"] = args ? args.configs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scimConfigs"] = args ? args.scimConfigs : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZeroTrustAccessIdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ZeroTrustAccessIdentityProvider = ZeroTrustAccessIdentityProvider;
/** @internal */
ZeroTrustAccessIdentityProvider.__pulumiType = 'cloudflare:index/zeroTrustAccessIdentityProvider:ZeroTrustAccessIdentityProvider';
//# sourceMappingURL=zeroTrustAccessIdentityProvider.js.map