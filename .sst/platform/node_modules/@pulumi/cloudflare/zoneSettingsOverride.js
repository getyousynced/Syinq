"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoneSettingsOverride = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a resource which customizes Cloudflare zone settings.
 *
 * > You **should not** use this resource to manage every zone setting. This
 *   resource is only intended to override those which you do not want the default.
 *   Attempting to manage all settings will result in problems with the resource
 *   applying in a consistent manner.
 *
 * ## Plan-Dependent Settings
 *
 * Note that some settings are only available on certain plans. Setting an argument
 * for a feature that is not available on the plan configured for the zone will
 * result in an error:
 *
 * This is true even when setting the argument to its default value. These values
 * should either be omitted or set to `null` for zones with plans that don't
 * support the feature. See the [plan feature matrices](https://www.cloudflare.com/plans/) for details on
 * feature support by plan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const test = new cloudflare.ZoneSettingsOverride("test", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     settings: {
 *         brotli: "on",
 *         challengeTtl: 2700,
 *         securityLevel: "high",
 *         opportunisticEncryption: "on",
 *         automaticHttpsRewrites: "on",
 *         mirage: "on",
 *         waf: "on",
 *         minify: {
 *             css: "on",
 *             js: "off",
 *             html: "off",
 *         },
 *         securityHeader: {
 *             enabled: true,
 *         },
 *     },
 * });
 * ```
 */
class ZoneSettingsOverride extends pulumi.CustomResource {
    /**
     * Get an existing ZoneSettingsOverride resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ZoneSettingsOverride(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ZoneSettingsOverride.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZoneSettingsOverride.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["initialSettings"] = state ? state.initialSettings : undefined;
            resourceInputs["initialSettingsReadAt"] = state ? state.initialSettingsReadAt : undefined;
            resourceInputs["readonlySettings"] = state ? state.readonlySettings : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneStatus"] = state ? state.zoneStatus : undefined;
            resourceInputs["zoneType"] = state ? state.zoneType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["initialSettings"] = undefined /*out*/;
            resourceInputs["initialSettingsReadAt"] = undefined /*out*/;
            resourceInputs["readonlySettings"] = undefined /*out*/;
            resourceInputs["zoneStatus"] = undefined /*out*/;
            resourceInputs["zoneType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZoneSettingsOverride.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ZoneSettingsOverride = ZoneSettingsOverride;
/** @internal */
ZoneSettingsOverride.__pulumiType = 'cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride';
//# sourceMappingURL=zoneSettingsOverride.js.map