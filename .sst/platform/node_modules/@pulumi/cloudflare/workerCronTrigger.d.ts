import * as pulumi from "@pulumi/pulumi";
/**
 * Worker Cron Triggers allow users to map a cron expression to a Worker script
 * using a `ScheduledEvent` listener that enables Workers to be executed on a
 * schedule. Worker Cron Triggers are ideal for running periodic jobs for
 * maintenance or calling third-party APIs to collect up-to-date data.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 * import * as std from "@pulumi/std";
 *
 * const exampleScript = new cloudflare.WorkersScript("example_script", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "example-script",
 *     content: std.file({
 *         input: "path/to/my.js",
 *     }).then(invoke => invoke.result),
 * });
 * const exampleTrigger = new cloudflare.WorkerCronTrigger("example_trigger", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     scriptName: exampleScript.name,
 *     schedules: [
 *         "*&#47;5 * * * *",
 *         "10 7 * * mon-fri",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerCronTrigger:WorkerCronTrigger example <account_id>/<script_name>
 * ```
 */
export declare class WorkerCronTrigger extends pulumi.CustomResource {
    /**
     * Get an existing WorkerCronTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerCronTriggerState, opts?: pulumi.CustomResourceOptions): WorkerCronTrigger;
    /**
     * Returns true if the given object is an instance of WorkerCronTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is WorkerCronTrigger;
    /**
     * The account identifier to target for the resource.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * Cron expressions to execute the Worker script.
     */
    readonly schedules: pulumi.Output<string[]>;
    /**
     * Worker script to target for the schedules.
     */
    readonly scriptName: pulumi.Output<string>;
    /**
     * Create a WorkerCronTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkerCronTriggerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering WorkerCronTrigger resources.
 */
export interface WorkerCronTriggerState {
    /**
     * The account identifier to target for the resource.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Cron expressions to execute the Worker script.
     */
    schedules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Worker script to target for the schedules.
     */
    scriptName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a WorkerCronTrigger resource.
 */
export interface WorkerCronTriggerArgs {
    /**
     * The account identifier to target for the resource.
     */
    accountId: pulumi.Input<string>;
    /**
     * Cron expressions to execute the Worker script.
     */
    schedules: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Worker script to target for the schedules.
     */
    scriptName: pulumi.Input<string>;
}
