import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Provides a resource which manages Cloudflare API tokens.
 *
 * Read more about permission groups and their applicable scopes in the
 * [developer documentation](https://developers.cloudflare.com/api/tokens/create/permissions).
 */
export declare class ApiToken extends pulumi.CustomResource {
    /**
     * Get an existing ApiToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiTokenState, opts?: pulumi.CustomResourceOptions): ApiToken;
    /**
     * Returns true if the given object is an instance of ApiToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ApiToken;
    /**
     * Conditions under which the token should be considered valid.
     */
    readonly condition: pulumi.Output<outputs.ApiTokenCondition | undefined>;
    /**
     * The expiration time on or after which the token MUST NOT be accepted for processing.
     */
    readonly expiresOn: pulumi.Output<string | undefined>;
    /**
     * Timestamp of when the token was issued.
     */
    readonly issuedOn: pulumi.Output<string>;
    /**
     * Timestamp of when the token was last modified.
     */
    readonly modifiedOn: pulumi.Output<string>;
    /**
     * Name of the API Token.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The time before which the token MUST NOT be accepted for processing.
     */
    readonly notBefore: pulumi.Output<string | undefined>;
    /**
     * Permissions policy. Multiple policy blocks can be defined.
     */
    readonly policies: pulumi.Output<outputs.ApiTokenPolicy[]>;
    readonly status: pulumi.Output<string>;
    /**
     * The value of the API Token.
     */
    readonly value: pulumi.Output<string>;
    /**
     * Create a ApiToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiTokenArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ApiToken resources.
 */
export interface ApiTokenState {
    /**
     * Conditions under which the token should be considered valid.
     */
    condition?: pulumi.Input<inputs.ApiTokenCondition>;
    /**
     * The expiration time on or after which the token MUST NOT be accepted for processing.
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * Timestamp of when the token was issued.
     */
    issuedOn?: pulumi.Input<string>;
    /**
     * Timestamp of when the token was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * Name of the API Token.
     */
    name?: pulumi.Input<string>;
    /**
     * The time before which the token MUST NOT be accepted for processing.
     */
    notBefore?: pulumi.Input<string>;
    /**
     * Permissions policy. Multiple policy blocks can be defined.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.ApiTokenPolicy>[]>;
    status?: pulumi.Input<string>;
    /**
     * The value of the API Token.
     */
    value?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ApiToken resource.
 */
export interface ApiTokenArgs {
    /**
     * Conditions under which the token should be considered valid.
     */
    condition?: pulumi.Input<inputs.ApiTokenCondition>;
    /**
     * The expiration time on or after which the token MUST NOT be accepted for processing.
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * Name of the API Token.
     */
    name: pulumi.Input<string>;
    /**
     * The time before which the token MUST NOT be accepted for processing.
     */
    notBefore?: pulumi.Input<string>;
    /**
     * Permissions policy. Multiple policy blocks can be defined.
     */
    policies: pulumi.Input<pulumi.Input<inputs.ApiTokenPolicy>[]>;
}
