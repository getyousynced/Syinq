import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Provides a Cloudflare Split Tunnel resource. Split tunnels are used to either
 * include or exclude lists of routes from the WARP client's tunnel.
 *
 * ## Import
 *
 * Split Tunnels for default device policies must use "default" as the policy ID.
 *
 * ```sh
 * $ pulumi import cloudflare:index/splitTunnel:SplitTunnel example <account_id>/<policy_id>/<mode>
 * ```
 */
export declare class SplitTunnel extends pulumi.CustomResource {
    /**
     * Get an existing SplitTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SplitTunnelState, opts?: pulumi.CustomResourceOptions): SplitTunnel;
    /**
     * Returns true if the given object is an instance of SplitTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SplitTunnel;
    /**
     * The account identifier to target for the resource.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * The mode of the split tunnel policy. Available values: `include`, `exclude`.
     */
    readonly mode: pulumi.Output<string>;
    /**
     * The settings policy for which to configure this split tunnel policy.
     */
    readonly policyId: pulumi.Output<string | undefined>;
    /**
     * The value of the tunnel attributes.
     */
    readonly tunnels: pulumi.Output<outputs.SplitTunnelTunnel[]>;
    /**
     * Create a SplitTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SplitTunnelArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SplitTunnel resources.
 */
export interface SplitTunnelState {
    /**
     * The account identifier to target for the resource.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The mode of the split tunnel policy. Available values: `include`, `exclude`.
     */
    mode?: pulumi.Input<string>;
    /**
     * The settings policy for which to configure this split tunnel policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The value of the tunnel attributes.
     */
    tunnels?: pulumi.Input<pulumi.Input<inputs.SplitTunnelTunnel>[]>;
}
/**
 * The set of arguments for constructing a SplitTunnel resource.
 */
export interface SplitTunnelArgs {
    /**
     * The account identifier to target for the resource.
     */
    accountId: pulumi.Input<string>;
    /**
     * The mode of the split tunnel policy. Available values: `include`, `exclude`.
     */
    mode: pulumi.Input<string>;
    /**
     * The settings policy for which to configure this split tunnel policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The value of the tunnel attributes.
     */
    tunnels: pulumi.Input<pulumi.Input<inputs.SplitTunnelTunnel>[]>;
}
