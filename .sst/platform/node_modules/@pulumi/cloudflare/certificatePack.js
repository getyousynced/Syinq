"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificatePack = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/certificatePack:CertificatePack example <zone_id>/<certificate_pack_id>
 * ```
 *
 * While supported, importing isn't recommended and it is advised to replace the
 *
 * certificate entirely instead.
 */
class CertificatePack extends pulumi.CustomResource {
    /**
     * Get an existing CertificatePack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CertificatePack(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CertificatePack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificatePack.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["certificateAuthority"] = state ? state.certificateAuthority : undefined;
            resourceInputs["cloudflareBranding"] = state ? state.cloudflareBranding : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validationErrors"] = state ? state.validationErrors : undefined;
            resourceInputs["validationMethod"] = state ? state.validationMethod : undefined;
            resourceInputs["validationRecords"] = state ? state.validationRecords : undefined;
            resourceInputs["validityDays"] = state ? state.validityDays : undefined;
            resourceInputs["waitForActiveStatus"] = state ? state.waitForActiveStatus : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.certificateAuthority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthority'");
            }
            if ((!args || args.hosts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.validationMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validationMethod'");
            }
            if ((!args || args.validityDays === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validityDays'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["certificateAuthority"] = args ? args.certificateAuthority : undefined;
            resourceInputs["cloudflareBranding"] = args ? args.cloudflareBranding : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validationErrors"] = args ? args.validationErrors : undefined;
            resourceInputs["validationMethod"] = args ? args.validationMethod : undefined;
            resourceInputs["validationRecords"] = args ? args.validationRecords : undefined;
            resourceInputs["validityDays"] = args ? args.validityDays : undefined;
            resourceInputs["waitForActiveStatus"] = args ? args.waitForActiveStatus : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CertificatePack.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CertificatePack = CertificatePack;
/** @internal */
CertificatePack.__pulumiType = 'cloudflare:index/certificatePack:CertificatePack';
//# sourceMappingURL=certificatePack.js.map