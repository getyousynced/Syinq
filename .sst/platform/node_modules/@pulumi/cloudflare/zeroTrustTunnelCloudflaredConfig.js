"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroTrustTunnelCloudflaredConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Cloudflare Tunnel configuration resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleTunnel = new cloudflare.ZeroTrustTunnelCloudflared("example_tunnel", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "example_tunnel",
 *     secret: "<32 character secret>",
 * });
 * const exampleConfig = new cloudflare.ZeroTrustTunnelCloudflaredConfig("example_config", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     tunnelId: exampleTunnel.id,
 *     config: {
 *         warpRouting: {
 *             enabled: true,
 *         },
 *         originRequest: {
 *             connectTimeout: "1m0s",
 *             tlsTimeout: "1m0s",
 *             tcpKeepAlive: "1m0s",
 *             noHappyEyeballs: false,
 *             keepAliveConnections: 1024,
 *             keepAliveTimeout: "1m0s",
 *             httpHostHeader: "baz",
 *             originServerName: "foobar",
 *             caPool: "/path/to/unsigned/ca/pool",
 *             noTlsVerify: false,
 *             disableChunkedEncoding: false,
 *             bastionMode: false,
 *             proxyAddress: "10.0.0.1",
 *             proxyPort: 8123,
 *             proxyType: "socks",
 *             ipRules: [{
 *                 prefix: "/web",
 *                 ports: [
 *                     80,
 *                     443,
 *                 ],
 *                 allow: false,
 *             }],
 *         },
 *         ingressRules: [
 *             {
 *                 hostname: "foo",
 *                 path: "/bar",
 *                 service: "http://10.0.0.2:8080",
 *                 originRequest: {
 *                     connectTimeout: "2m0s",
 *                     access: {
 *                         required: true,
 *                         teamName: "terraform",
 *                         audTags: ["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"],
 *                     },
 *                 },
 *             },
 *             {
 *                 service: "https://10.0.0.3:8081",
 *             },
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustTunnelCloudflaredConfig:ZeroTrustTunnelCloudflaredConfig example <account_id>/<tunnel_id>
 * ```
 */
class ZeroTrustTunnelCloudflaredConfig extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustTunnelCloudflaredConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ZeroTrustTunnelCloudflaredConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ZeroTrustTunnelCloudflaredConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustTunnelCloudflaredConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["tunnelId"] = state ? state.tunnelId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.tunnelId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tunnelId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["tunnelId"] = args ? args.tunnelId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZeroTrustTunnelCloudflaredConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ZeroTrustTunnelCloudflaredConfig = ZeroTrustTunnelCloudflaredConfig;
/** @internal */
ZeroTrustTunnelCloudflaredConfig.__pulumiType = 'cloudflare:index/zeroTrustTunnelCloudflaredConfig:ZeroTrustTunnelCloudflaredConfig';
//# sourceMappingURL=zeroTrustTunnelCloudflaredConfig.js.map