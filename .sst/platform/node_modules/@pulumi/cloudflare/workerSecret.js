"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerSecret = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Cloudflare Worker secret resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const mySecret = new cloudflare.WorkerSecret("my_secret", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "MY_EXAMPLE_SECRET_TEXT",
 *     scriptName: "script_1",
 *     secretText: "my_secret_value",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerSecret:WorkerSecret example <account_id>/<script_name>/<secret_name>
 * ```
 */
class WorkerSecret extends pulumi.CustomResource {
    /**
     * Get an existing WorkerSecret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WorkerSecret(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WorkerSecret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkerSecret.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scriptName"] = state ? state.scriptName : undefined;
            resourceInputs["secretText"] = state ? state.secretText : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.scriptName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scriptName'");
            }
            if ((!args || args.secretText === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretText'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scriptName"] = args ? args.scriptName : undefined;
            resourceInputs["secretText"] = (args === null || args === void 0 ? void 0 : args.secretText) ? pulumi.secret(args.secretText) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretText"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(WorkerSecret.__pulumiType, name, resourceInputs, opts);
    }
}
exports.WorkerSecret = WorkerSecret;
/** @internal */
WorkerSecret.__pulumiType = 'cloudflare:index/workerSecret:WorkerSecret';
//# sourceMappingURL=workerSecret.js.map