"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimit = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Cloudflare rate limit resource for a given zone. This can
 * be used to limit the traffic you receive zone-wide, or matching more
 * specific types of requests/responses.
 *
 * > `cloudflare.RateLimit` is in a deprecation phase until January 15th, 2025.
 *   During this time period, this resource is still
 *   fully supported but you are strongly advised to move to the
 *   `cloudflare.Ruleset` resource. Full details can be found in the
 *   developer documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.RateLimit("example", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     threshold: 2000,
 *     period: 2,
 *     match: {
 *         request: {
 *             urlPattern: `${cloudflareZone}/*`,
 *             schemes: [
 *                 "HTTP",
 *                 "HTTPS",
 *             ],
 *             methods: [
 *                 "GET",
 *                 "POST",
 *                 "PUT",
 *                 "DELETE",
 *                 "PATCH",
 *                 "HEAD",
 *             ],
 *         },
 *         response: {
 *             statuses: [
 *                 200,
 *                 201,
 *                 202,
 *                 301,
 *                 429,
 *             ],
 *             originTraffic: false,
 *             headers: [
 *                 {
 *                     name: "Host",
 *                     op: "eq",
 *                     value: "localhost",
 *                 },
 *                 {
 *                     name: "X-Example",
 *                     op: "ne",
 *                     value: "my-example",
 *                 },
 *             ],
 *         },
 *     },
 *     action: {
 *         mode: "simulate",
 *         timeout: 43200,
 *         response: {
 *             contentType: "text/plain",
 *             body: "custom response body",
 *         },
 *     },
 *     correlate: {
 *         by: "nat",
 *     },
 *     disabled: false,
 *     description: "example rate limit for a zone",
 *     bypassUrlPatterns: [
 *         "example.com/bypass1",
 *         "example.com/bypass2",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/rateLimit:RateLimit example <zone_id>/<rate_limit_id>
 * ```
 */
class RateLimit extends pulumi.CustomResource {
    /**
     * Get an existing RateLimit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RateLimit(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RateLimit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RateLimit.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["bypassUrlPatterns"] = state ? state.bypassUrlPatterns : undefined;
            resourceInputs["correlate"] = state ? state.correlate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["match"] = state ? state.match : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.period === undefined) && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["bypassUrlPatterns"] = args ? args.bypassUrlPatterns : undefined;
            resourceInputs["correlate"] = args ? args.correlate : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["match"] = args ? args.match : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RateLimit.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RateLimit = RateLimit;
/** @internal */
RateLimit.__pulumiType = 'cloudflare:index/rateLimit:RateLimit';
//# sourceMappingURL=rateLimit.js.map