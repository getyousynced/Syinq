"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccountRolesOutput = exports.getAccountRoles = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Use this data source to lookup [Account Roles](https://api.cloudflare.com/#account-roles-properties).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const accountRoles = cloudflare.getAccountRoles({
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 * });
 * const rolesByName = accountRoles.then(accountRoles => .reduce((__obj, role) => ({ ...__obj, [role.name]: role })));
 * const member = new cloudflare.AccountMember("member", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     emailAddress: "user@example.com",
 *     roleIds: [rolesByName.Administrator?.id],
 * });
 * ```
 */
function getAccountRoles(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getAccountRoles:getAccountRoles", {
        "accountId": args.accountId,
    }, opts);
}
exports.getAccountRoles = getAccountRoles;
/**
 * Use this data source to lookup [Account Roles](https://api.cloudflare.com/#account-roles-properties).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const accountRoles = cloudflare.getAccountRoles({
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 * });
 * const rolesByName = accountRoles.then(accountRoles => .reduce((__obj, role) => ({ ...__obj, [role.name]: role })));
 * const member = new cloudflare.AccountMember("member", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     emailAddress: "user@example.com",
 *     roleIds: [rolesByName.Administrator?.id],
 * });
 * ```
 */
function getAccountRolesOutput(args, opts) {
    return pulumi.output(args).apply((a) => getAccountRoles(a, opts));
}
exports.getAccountRolesOutput = getAccountRolesOutput;
//# sourceMappingURL=getAccountRoles.js.map