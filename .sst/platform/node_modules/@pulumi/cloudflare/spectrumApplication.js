"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpectrumApplication = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Cloudflare Spectrum Application. You can extend the power
 * of Cloudflare's DDoS, TLS, and IP Firewall to your other TCP-based
 * services.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.SpectrumApplication("example", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     protocol: "tcp/22",
 *     trafficType: "direct",
 *     dns: {
 *         type: "CNAME",
 *         name: "ssh.example.com",
 *     },
 *     originDirects: ["tcp://192.0.2.1:22"],
 *     edgeIps: {
 *         type: "static",
 *         ips: [
 *             "203.0.113.1",
 *             "203.0.113.2",
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/spectrumApplication:SpectrumApplication example <zone_id>/<spectrum_application_id>
 * ```
 */
class SpectrumApplication extends pulumi.CustomResource {
    /**
     * Get an existing SpectrumApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SpectrumApplication(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SpectrumApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpectrumApplication.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["argoSmartRouting"] = state ? state.argoSmartRouting : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["edgeIps"] = state ? state.edgeIps : undefined;
            resourceInputs["ipFirewall"] = state ? state.ipFirewall : undefined;
            resourceInputs["originDirects"] = state ? state.originDirects : undefined;
            resourceInputs["originDns"] = state ? state.originDns : undefined;
            resourceInputs["originPort"] = state ? state.originPort : undefined;
            resourceInputs["originPortRange"] = state ? state.originPortRange : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["proxyProtocol"] = state ? state.proxyProtocol : undefined;
            resourceInputs["tls"] = state ? state.tls : undefined;
            resourceInputs["trafficType"] = state ? state.trafficType : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dns'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["argoSmartRouting"] = args ? args.argoSmartRouting : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["edgeIps"] = args ? args.edgeIps : undefined;
            resourceInputs["ipFirewall"] = args ? args.ipFirewall : undefined;
            resourceInputs["originDirects"] = args ? args.originDirects : undefined;
            resourceInputs["originDns"] = args ? args.originDns : undefined;
            resourceInputs["originPort"] = args ? args.originPort : undefined;
            resourceInputs["originPortRange"] = args ? args.originPortRange : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["proxyProtocol"] = args ? args.proxyProtocol : undefined;
            resourceInputs["tls"] = args ? args.tls : undefined;
            resourceInputs["trafficType"] = args ? args.trafficType : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpectrumApplication.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SpectrumApplication = SpectrumApplication;
/** @internal */
SpectrumApplication.__pulumiType = 'cloudflare:index/spectrumApplication:SpectrumApplication';
//# sourceMappingURL=spectrumApplication.js.map