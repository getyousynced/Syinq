"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogpushOwnershipChallenge = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a resource which manages Cloudflare Logpush ownership
 * challenges to use in a Logpush Job. On it's own, doesn't do much
 * however this resource should be used in conjunction to create
 * Logpush jobs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.LogpushOwnershipChallenge("example", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     destinationConf: "s3://my-bucket-path?region=us-west-2",
 * });
 * ```
 */
class LogpushOwnershipChallenge extends pulumi.CustomResource {
    /**
     * Get an existing LogpushOwnershipChallenge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LogpushOwnershipChallenge(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogpushOwnershipChallenge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogpushOwnershipChallenge.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["destinationConf"] = state ? state.destinationConf : undefined;
            resourceInputs["ownershipChallengeFilename"] = state ? state.ownershipChallengeFilename : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.destinationConf === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationConf'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["destinationConf"] = args ? args.destinationConf : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["ownershipChallengeFilename"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogpushOwnershipChallenge.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LogpushOwnershipChallenge = LogpushOwnershipChallenge;
/** @internal */
LogpushOwnershipChallenge.__pulumiType = 'cloudflare:index/logpushOwnershipChallenge:LogpushOwnershipChallenge';
//# sourceMappingURL=logpushOwnershipChallenge.js.map