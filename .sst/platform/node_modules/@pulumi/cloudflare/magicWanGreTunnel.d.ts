import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a resource, that manages GRE tunnels for Magic Transit.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.MagicWanGreTunnel("example", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "GRE_1",
 *     customerGreEndpoint: "203.0.113.1",
 *     cloudflareGreEndpoint: "203.0.113.2",
 *     interfaceAddress: "192.0.2.0/31",
 *     description: "Tunnel for ISP X",
 *     ttl: 64,
 *     mtu: 1476,
 *     healthCheckEnabled: true,
 *     healthCheckTarget: "203.0.113.1",
 *     healthCheckType: "reply",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel example <account_id>/<tunnel_id>
 * ```
 */
export declare class MagicWanGreTunnel extends pulumi.CustomResource {
    /**
     * Get an existing MagicWanGreTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicWanGreTunnelState, opts?: pulumi.CustomResourceOptions): MagicWanGreTunnel;
    /**
     * Returns true if the given object is an instance of MagicWanGreTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MagicWanGreTunnel;
    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    readonly accountId: pulumi.Output<string | undefined>;
    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     */
    readonly cloudflareGreEndpoint: pulumi.Output<string>;
    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     */
    readonly customerGreEndpoint: pulumi.Output<string>;
    /**
     * Description of the GRE tunnel intent.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies if ICMP tunnel health checks are enabled.
     */
    readonly healthCheckEnabled: pulumi.Output<boolean>;
    /**
     * The IP address of the customer endpoint that will receive tunnel health checks.
     */
    readonly healthCheckTarget: pulumi.Output<string>;
    /**
     * Specifies the ICMP echo type for the health check. Available values: `request`, `reply`.
     */
    readonly healthCheckType: pulumi.Output<string>;
    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     */
    readonly interfaceAddress: pulumi.Output<string>;
    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel.
     */
    readonly mtu: pulumi.Output<number>;
    /**
     * Name of the GRE tunnel.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     */
    readonly ttl: pulumi.Output<number>;
    /**
     * Create a MagicWanGreTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicWanGreTunnelArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering MagicWanGreTunnel resources.
 */
export interface MagicWanGreTunnelState {
    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    accountId?: pulumi.Input<string>;
    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     */
    cloudflareGreEndpoint?: pulumi.Input<string>;
    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     */
    customerGreEndpoint?: pulumi.Input<string>;
    /**
     * Description of the GRE tunnel intent.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies if ICMP tunnel health checks are enabled.
     */
    healthCheckEnabled?: pulumi.Input<boolean>;
    /**
     * The IP address of the customer endpoint that will receive tunnel health checks.
     */
    healthCheckTarget?: pulumi.Input<string>;
    /**
     * Specifies the ICMP echo type for the health check. Available values: `request`, `reply`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     */
    interfaceAddress?: pulumi.Input<string>;
    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel.
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name of the GRE tunnel.
     */
    name?: pulumi.Input<string>;
    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     */
    ttl?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a MagicWanGreTunnel resource.
 */
export interface MagicWanGreTunnelArgs {
    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    accountId?: pulumi.Input<string>;
    /**
     * The IP address assigned to the Cloudflare side of the GRE tunnel.
     */
    cloudflareGreEndpoint: pulumi.Input<string>;
    /**
     * The IP address assigned to the customer side of the GRE tunnel.
     */
    customerGreEndpoint: pulumi.Input<string>;
    /**
     * Description of the GRE tunnel intent.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies if ICMP tunnel health checks are enabled.
     */
    healthCheckEnabled?: pulumi.Input<boolean>;
    /**
     * The IP address of the customer endpoint that will receive tunnel health checks.
     */
    healthCheckTarget?: pulumi.Input<string>;
    /**
     * Specifies the ICMP echo type for the health check. Available values: `request`, `reply`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     */
    interfaceAddress: pulumi.Input<string>;
    /**
     * Maximum Transmission Unit (MTU) in bytes for the GRE tunnel.
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name of the GRE tunnel.
     */
    name: pulumi.Input<string>;
    /**
     * Time To Live (TTL) in number of hops of the GRE tunnel.
     */
    ttl?: pulumi.Input<number>;
}
