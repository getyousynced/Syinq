import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Provides a Cloudflare Access Policy resource. Access Policies are
 * used in conjunction with Access Applications to restrict access to
 * a particular resource.
 *
 * > It's required that an `accountId` or `zoneId` is provided and in most cases using either is fine.
 *    However, if you're using a scoped access token, you must provide the argument that matches the token's
 *    scope. For example, an access token that is scoped to the "example.com" zone needs to use the `zoneId` argument.
 *    If 'application_id' is omitted, the policy created can be reused by multiple access applications.
 *    Any cloudflare.AccessApplication resource can reference reusable policies through its `policies` argument.
 *    To destroy a reusable policy and remove it from all applications' policies lists on the same apply, preemptively set the
 *    lifecycle option `createBeforeDestroy` to true on the 'cloudflare_access_policy' resource.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy example account/<account_id>/<application_id>/<policy_id>
 * ```
 */
export declare class ZeroTrustAccessPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZeroTrustAccessPolicyState, opts?: pulumi.CustomResourceOptions): ZeroTrustAccessPolicy;
    /**
     * Returns true if the given object is an instance of ZeroTrustAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ZeroTrustAccessPolicy;
    /**
     * The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
     */
    readonly accountId: pulumi.Output<string | undefined>;
    /**
     * The ID of the application the policy is associated with. Required when using `precedence`. **Modifying this attribute will force creation of a new resource.**
     */
    readonly applicationId: pulumi.Output<string | undefined>;
    readonly approvalGroups: pulumi.Output<outputs.ZeroTrustAccessPolicyApprovalGroup[] | undefined>;
    readonly approvalRequired: pulumi.Output<boolean | undefined>;
    /**
     * Defines the action Access will take if the policy matches the user. Available values: `allow`, `deny`, `nonIdentity`, `bypass`.
     */
    readonly decision: pulumi.Output<string>;
    /**
     * A series of access conditions, see Access Groups.
     */
    readonly excludes: pulumi.Output<outputs.ZeroTrustAccessPolicyExclude[] | undefined>;
    /**
     * A series of access conditions, see Access Groups.
     */
    readonly includes: pulumi.Output<outputs.ZeroTrustAccessPolicyInclude[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy.
     */
    readonly isolationRequired: pulumi.Output<boolean | undefined>;
    /**
     * Friendly name of the Access Policy.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The unique precedence for policies on a single application. Required when using `applicationId`.
     */
    readonly precedence: pulumi.Output<number | undefined>;
    /**
     * The prompt to display to the user for a justification for accessing the resource. Required when using `purposeJustificationRequired`.
     */
    readonly purposeJustificationPrompt: pulumi.Output<string | undefined>;
    /**
     * Whether to prompt the user for a justification for accessing the resource.
     */
    readonly purposeJustificationRequired: pulumi.Output<boolean | undefined>;
    /**
     * A series of access conditions, see Access Groups.
     */
    readonly requires: pulumi.Output<outputs.ZeroTrustAccessPolicyRequire[] | undefined>;
    /**
     * How often a user will be forced to re-authorise. Must be in the format `48h` or `2h45m`.
     */
    readonly sessionDuration: pulumi.Output<string | undefined>;
    /**
     * The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
     */
    readonly zoneId: pulumi.Output<string | undefined>;
    /**
     * Create a ZeroTrustAccessPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZeroTrustAccessPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ZeroTrustAccessPolicy resources.
 */
export interface ZeroTrustAccessPolicyState {
    /**
     * The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
     */
    accountId?: pulumi.Input<string>;
    /**
     * The ID of the application the policy is associated with. Required when using `precedence`. **Modifying this attribute will force creation of a new resource.**
     */
    applicationId?: pulumi.Input<string>;
    approvalGroups?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyApprovalGroup>[]>;
    approvalRequired?: pulumi.Input<boolean>;
    /**
     * Defines the action Access will take if the policy matches the user. Available values: `allow`, `deny`, `nonIdentity`, `bypass`.
     */
    decision?: pulumi.Input<string>;
    /**
     * A series of access conditions, see Access Groups.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyExclude>[]>;
    /**
     * A series of access conditions, see Access Groups.
     */
    includes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyInclude>[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy.
     */
    isolationRequired?: pulumi.Input<boolean>;
    /**
     * Friendly name of the Access Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique precedence for policies on a single application. Required when using `applicationId`.
     */
    precedence?: pulumi.Input<number>;
    /**
     * The prompt to display to the user for a justification for accessing the resource. Required when using `purposeJustificationRequired`.
     */
    purposeJustificationPrompt?: pulumi.Input<string>;
    /**
     * Whether to prompt the user for a justification for accessing the resource.
     */
    purposeJustificationRequired?: pulumi.Input<boolean>;
    /**
     * A series of access conditions, see Access Groups.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyRequire>[]>;
    /**
     * How often a user will be forced to re-authorise. Must be in the format `48h` or `2h45m`.
     */
    sessionDuration?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ZeroTrustAccessPolicy resource.
 */
export interface ZeroTrustAccessPolicyArgs {
    /**
     * The account identifier to target for the resource. Conflicts with `zoneId`. **Modifying this attribute will force creation of a new resource.**
     */
    accountId?: pulumi.Input<string>;
    /**
     * The ID of the application the policy is associated with. Required when using `precedence`. **Modifying this attribute will force creation of a new resource.**
     */
    applicationId?: pulumi.Input<string>;
    approvalGroups?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyApprovalGroup>[]>;
    approvalRequired?: pulumi.Input<boolean>;
    /**
     * Defines the action Access will take if the policy matches the user. Available values: `allow`, `deny`, `nonIdentity`, `bypass`.
     */
    decision: pulumi.Input<string>;
    /**
     * A series of access conditions, see Access Groups.
     */
    excludes?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyExclude>[]>;
    /**
     * A series of access conditions, see Access Groups.
     */
    includes: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyInclude>[]>;
    /**
     * Require this application to be served in an isolated browser for users matching this policy.
     */
    isolationRequired?: pulumi.Input<boolean>;
    /**
     * Friendly name of the Access Policy.
     */
    name: pulumi.Input<string>;
    /**
     * The unique precedence for policies on a single application. Required when using `applicationId`.
     */
    precedence?: pulumi.Input<number>;
    /**
     * The prompt to display to the user for a justification for accessing the resource. Required when using `purposeJustificationRequired`.
     */
    purposeJustificationPrompt?: pulumi.Input<string>;
    /**
     * Whether to prompt the user for a justification for accessing the resource.
     */
    purposeJustificationRequired?: pulumi.Input<boolean>;
    /**
     * A series of access conditions, see Access Groups.
     */
    requires?: pulumi.Input<pulumi.Input<inputs.ZeroTrustAccessPolicyRequire>[]>;
    /**
     * How often a user will be forced to re-authorise. Must be in the format `48h` or `2h45m`.
     */
    sessionDuration?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource. Conflicts with `accountId`. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId?: pulumi.Input<string>;
}
