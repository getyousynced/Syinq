"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticRoute = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a resource, that manages Cloudflare static routes for Magic
 * Transit or Magic WAN. Static routes are used to route traffic
 * through GRE tunnels.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.StaticRoute("example", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     description: "New route for new prefix 192.0.2.0/24",
 *     prefix: "192.0.2.0/24",
 *     nexthop: "10.0.0.0",
 *     priority: 100,
 *     weight: 10,
 *     coloNames: ["den01"],
 *     coloRegions: ["APAC"],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/staticRoute:StaticRoute example <account_id>/<static_route_id>
 * ```
 */
class StaticRoute extends pulumi.CustomResource {
    /**
     * Get an existing StaticRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StaticRoute(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StaticRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StaticRoute.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["coloNames"] = state ? state.coloNames : undefined;
            resourceInputs["coloRegions"] = state ? state.coloRegions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["nexthop"] = state ? state.nexthop : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.nexthop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nexthop'");
            }
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["coloNames"] = args ? args.coloNames : undefined;
            resourceInputs["coloRegions"] = args ? args.coloRegions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["nexthop"] = args ? args.nexthop : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StaticRoute.__pulumiType, name, resourceInputs, opts);
    }
}
exports.StaticRoute = StaticRoute;
/** @internal */
StaticRoute.__pulumiType = 'cloudflare:index/staticRoute:StaticRoute';
//# sourceMappingURL=staticRoute.js.map