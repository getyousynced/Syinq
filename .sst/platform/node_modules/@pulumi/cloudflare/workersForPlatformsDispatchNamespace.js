"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkersForPlatformsDispatchNamespace = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The [Workers for Platforms](https://developers.cloudflare.com/cloudflare-for-platforms/workers-for-platforms/) resource allows you
 * to manage Cloudflare Workers for Platforms dispatch namespaces.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 * import * as std from "@pulumi/std";
 *
 * const example = new cloudflare.WorkersForPlatformsDispatchNamespace("example", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "example-namespace",
 * });
 * const customerWorker1 = new cloudflare.WorkersScript("customer_worker_1", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "customer-worker-1",
 *     content: std.file({
 *         input: "script.js",
 *     }).then(invoke => invoke.result),
 *     dispatchNamespace: example.name,
 *     tags: ["free"],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workersForPlatformsDispatchNamespace:WorkersForPlatformsDispatchNamespace example <account_id>/<namespace_name>
 * ```
 */
class WorkersForPlatformsDispatchNamespace extends pulumi.CustomResource {
    /**
     * Get an existing WorkersForPlatformsDispatchNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WorkersForPlatformsDispatchNamespace(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WorkersForPlatformsDispatchNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkersForPlatformsDispatchNamespace.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkersForPlatformsDispatchNamespace.__pulumiType, name, resourceInputs, opts);
    }
}
exports.WorkersForPlatformsDispatchNamespace = WorkersForPlatformsDispatchNamespace;
/** @internal */
WorkersForPlatformsDispatchNamespace.__pulumiType = 'cloudflare:index/workersForPlatformsDispatchNamespace:WorkersForPlatformsDispatchNamespace';
//# sourceMappingURL=workersForPlatformsDispatchNamespace.js.map