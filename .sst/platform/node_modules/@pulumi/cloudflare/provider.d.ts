import * as pulumi from "@pulumi/pulumi";
/**
 * The provider type for the cloudflare package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export declare class Provider extends pulumi.ProviderResource {
    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Provider;
    /**
     * Configure the base path used by the API client. Alternatively, can be configured using the `CLOUDFLARE_API_BASE_PATH`
     * environment variable.
     */
    readonly apiBasePath: pulumi.Output<string | undefined>;
    /**
     * Configure the hostname used by the API client. Alternatively, can be configured using the `CLOUDFLARE_API_HOSTNAME`
     * environment variable.
     */
    readonly apiHostname: pulumi.Output<string | undefined>;
    /**
     * The API key for operations. Alternatively, can be configured using the `CLOUDFLARE_API_KEY` environment variable. API
     * keys are [now considered legacy by
     * Cloudflare](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations), API tokens should be used
     * instead. Must provide only one of `apiKey`, `apiToken`, `apiUserServiceKey`.
     */
    readonly apiKey: pulumi.Output<string | undefined>;
    /**
     * The API Token for operations. Alternatively, can be configured using the `CLOUDFLARE_API_TOKEN` environment variable.
     * Must provide only one of `apiKey`, `apiToken`, `apiUserServiceKey`.
     */
    readonly apiToken: pulumi.Output<string | undefined>;
    /**
     * A special Cloudflare API key good for a restricted set of endpoints. Alternatively, can be configured using the
     * `CLOUDFLARE_API_USER_SERVICE_KEY` environment variable. Must provide only one of `apiKey`, `apiToken`,
     * `apiUserServiceKey`.
     */
    readonly apiUserServiceKey: pulumi.Output<string | undefined>;
    /**
     * A registered Cloudflare email address. Alternatively, can be configured using the `CLOUDFLARE_EMAIL` environment
     * variable. Required when using `apiKey`. Conflicts with `apiToken`.
     */
    readonly email: pulumi.Output<string | undefined>;
    readonly userAgentOperatorSuffix: pulumi.Output<string | undefined>;
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions);
}
/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Configure the base path used by the API client. Alternatively, can be configured using the `CLOUDFLARE_API_BASE_PATH`
     * environment variable.
     */
    apiBasePath?: pulumi.Input<string>;
    /**
     * Whether to print logs from the API client (using the default log library logger). Alternatively, can be configured using
     * the `CLOUDFLARE_API_CLIENT_LOGGING` environment variable.
     */
    apiClientLogging?: pulumi.Input<boolean>;
    /**
     * Configure the hostname used by the API client. Alternatively, can be configured using the `CLOUDFLARE_API_HOSTNAME`
     * environment variable.
     */
    apiHostname?: pulumi.Input<string>;
    /**
     * The API key for operations. Alternatively, can be configured using the `CLOUDFLARE_API_KEY` environment variable. API
     * keys are [now considered legacy by
     * Cloudflare](https://developers.cloudflare.com/fundamentals/api/get-started/keys/#limitations), API tokens should be used
     * instead. Must provide only one of `apiKey`, `apiToken`, `apiUserServiceKey`.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The API Token for operations. Alternatively, can be configured using the `CLOUDFLARE_API_TOKEN` environment variable.
     * Must provide only one of `apiKey`, `apiToken`, `apiUserServiceKey`.
     */
    apiToken?: pulumi.Input<string>;
    /**
     * A special Cloudflare API key good for a restricted set of endpoints. Alternatively, can be configured using the
     * `CLOUDFLARE_API_USER_SERVICE_KEY` environment variable. Must provide only one of `apiKey`, `apiToken`,
     * `apiUserServiceKey`.
     */
    apiUserServiceKey?: pulumi.Input<string>;
    /**
     * A registered Cloudflare email address. Alternatively, can be configured using the `CLOUDFLARE_EMAIL` environment
     * variable. Required when using `apiKey`. Conflicts with `apiToken`.
     */
    email?: pulumi.Input<string>;
    /**
     * Maximum backoff period in seconds after failed API calls. Alternatively, can be configured using the
     * `CLOUDFLARE_MAX_BACKOFF` environment variable.
     */
    maxBackoff?: pulumi.Input<number>;
    /**
     * Minimum backoff period in seconds after failed API calls. Alternatively, can be configured using the
     * `CLOUDFLARE_MIN_BACKOFF` environment variable.
     */
    minBackoff?: pulumi.Input<number>;
    /**
     * Maximum number of retries to perform when an API request fails. Alternatively, can be configured using the
     * `CLOUDFLARE_RETRIES` environment variable.
     */
    retries?: pulumi.Input<number>;
    /**
     * RPS limit to apply when making calls to the API. Alternatively, can be configured using the `CLOUDFLARE_RPS` environment
     * variable.
     */
    rps?: pulumi.Input<number>;
    userAgentOperatorSuffix?: pulumi.Input<string>;
}
