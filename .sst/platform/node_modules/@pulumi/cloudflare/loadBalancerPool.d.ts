import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Provides a Cloudflare Load Balancer pool resource. This provides a
 * pool of origins that can be used by a Cloudflare Load Balancer.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.LoadBalancerPool("example", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "example-pool",
 *     origins: [
 *         {
 *             name: "example-1",
 *             address: "192.0.2.1",
 *             enabled: false,
 *             headers: [{
 *                 header: "Host",
 *                 values: ["example-1"],
 *             }],
 *         },
 *         {
 *             name: "example-2",
 *             address: "192.0.2.2",
 *             headers: [{
 *                 header: "Host",
 *                 values: ["example-2"],
 *             }],
 *         },
 *     ],
 *     latitude: 55,
 *     longitude: -12,
 *     description: "example load balancer pool",
 *     enabled: false,
 *     minimumOrigins: 1,
 *     notificationEmail: "someone@example.com",
 *     loadSheddings: [{
 *         defaultPercent: 55,
 *         defaultPolicy: "random",
 *         sessionPercent: 12,
 *         sessionPolicy: "hash",
 *     }],
 *     originSteerings: [{
 *         policy: "random",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/loadBalancerPool:LoadBalancerPool example <account_id>/<load_balancer_pool_id>
 * ```
 */
export declare class LoadBalancerPool extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerPoolState, opts?: pulumi.CustomResourceOptions): LoadBalancerPool;
    /**
     * Returns true if the given object is an instance of LoadBalancerPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LoadBalancerPool;
    /**
     * The account identifier to target for the resource.
     */
    readonly accountId: pulumi.Output<string>;
    /**
     * A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
     */
    readonly checkRegions: pulumi.Output<string[]>;
    /**
     * The RFC3339 timestamp of when the load balancer was created.
     */
    readonly createdOn: pulumi.Output<string>;
    /**
     * Free text description.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any). Defaults to `true`.
     */
    readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The latitude this pool is physically located at; used for proximity steering.
     */
    readonly latitude: pulumi.Output<number | undefined>;
    /**
     * Setting for controlling load shedding for this pool.
     */
    readonly loadSheddings: pulumi.Output<outputs.LoadBalancerPoolLoadShedding[] | undefined>;
    /**
     * The longitude this pool is physically located at; used for proximity steering.
     */
    readonly longitude: pulumi.Output<number | undefined>;
    /**
     * The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
     */
    readonly minimumOrigins: pulumi.Output<number | undefined>;
    /**
     * The RFC3339 timestamp of when the load balancer was last modified.
     */
    readonly modifiedOn: pulumi.Output<string>;
    /**
     * The ID of the Monitor to use for health checking origins within this pool.
     */
    readonly monitor: pulumi.Output<string | undefined>;
    /**
     * A short name (tag) for the pool.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     */
    readonly notificationEmail: pulumi.Output<string | undefined>;
    /**
     * Set an origin steering policy to control origin selection within a pool.
     */
    readonly originSteerings: pulumi.Output<outputs.LoadBalancerPoolOriginSteering[] | undefined>;
    /**
     * The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     */
    readonly origins: pulumi.Output<outputs.LoadBalancerPoolOrigin[]>;
    /**
     * Create a LoadBalancerPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerPoolArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LoadBalancerPool resources.
 */
export interface LoadBalancerPoolState {
    /**
     * The account identifier to target for the resource.
     */
    accountId?: pulumi.Input<string>;
    /**
     * A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
     */
    checkRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The RFC3339 timestamp of when the load balancer was created.
     */
    createdOn?: pulumi.Input<string>;
    /**
     * Free text description.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any). Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The latitude this pool is physically located at; used for proximity steering.
     */
    latitude?: pulumi.Input<number>;
    /**
     * Setting for controlling load shedding for this pool.
     */
    loadSheddings?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPoolLoadShedding>[]>;
    /**
     * The longitude this pool is physically located at; used for proximity steering.
     */
    longitude?: pulumi.Input<number>;
    /**
     * The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
     */
    minimumOrigins?: pulumi.Input<number>;
    /**
     * The RFC3339 timestamp of when the load balancer was last modified.
     */
    modifiedOn?: pulumi.Input<string>;
    /**
     * The ID of the Monitor to use for health checking origins within this pool.
     */
    monitor?: pulumi.Input<string>;
    /**
     * A short name (tag) for the pool.
     */
    name?: pulumi.Input<string>;
    /**
     * The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     */
    notificationEmail?: pulumi.Input<string>;
    /**
     * Set an origin steering policy to control origin selection within a pool.
     */
    originSteerings?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPoolOriginSteering>[]>;
    /**
     * The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     */
    origins?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPoolOrigin>[]>;
}
/**
 * The set of arguments for constructing a LoadBalancerPool resource.
 */
export interface LoadBalancerPoolArgs {
    /**
     * The account identifier to target for the resource.
     */
    accountId: pulumi.Input<string>;
    /**
     * A list of regions (specified by region code) from which to run health checks. Empty means every Cloudflare data center (the default), but requires an Enterprise plan. Region codes can be found [here](https://developers.cloudflare.com/load-balancing/reference/region-mapping-api).
     */
    checkRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Free text description.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable (the default) this pool. Disabled pools will not receive traffic and are excluded from health checks. Disabling a pool will cause any load balancers using it to failover to the next pool (if any). Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The latitude this pool is physically located at; used for proximity steering.
     */
    latitude?: pulumi.Input<number>;
    /**
     * Setting for controlling load shedding for this pool.
     */
    loadSheddings?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPoolLoadShedding>[]>;
    /**
     * The longitude this pool is physically located at; used for proximity steering.
     */
    longitude?: pulumi.Input<number>;
    /**
     * The minimum number of origins that must be healthy for this pool to serve traffic. If the number of healthy origins falls below this number, the pool will be marked unhealthy and we will failover to the next available pool. Defaults to `1`.
     */
    minimumOrigins?: pulumi.Input<number>;
    /**
     * The ID of the Monitor to use for health checking origins within this pool.
     */
    monitor?: pulumi.Input<string>;
    /**
     * A short name (tag) for the pool.
     */
    name: pulumi.Input<string>;
    /**
     * The email address to send health status notifications to. This can be an individual mailbox or a mailing list. Multiple emails can be supplied as a comma delimited list.
     */
    notificationEmail?: pulumi.Input<string>;
    /**
     * Set an origin steering policy to control origin selection within a pool.
     */
    originSteerings?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPoolOriginSteering>[]>;
    /**
     * The list of origins within this pool. Traffic directed at this pool is balanced across all currently healthy origins, provided the pool itself is healthy.
     */
    origins: pulumi.Input<pulumi.Input<inputs.LoadBalancerPoolOrigin>[]>;
}
