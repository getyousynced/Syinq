import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a resource, that manages Keyless certificates.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.KeylessCertificate("example", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     bundleMethod: "ubiquitous",
 *     name: "example.com Keyless SSL",
 *     host: "example.com",
 *     port: 24008,
 *     enabled: true,
 *     certificate: "-----INSERT CERTIFICATE-----",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/keylessCertificate:KeylessCertificate example <zone_id>/<keyless_certificate_id>
 * ```
 */
export declare class KeylessCertificate extends pulumi.CustomResource {
    /**
     * Get an existing KeylessCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeylessCertificateState, opts?: pulumi.CustomResourceOptions): KeylessCertificate;
    /**
     * Returns true if the given object is an instance of KeylessCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is KeylessCertificate;
    /**
     * A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it. Available values: `ubiquitous`, `optimal`, `force`. Defaults to `ubiquitous`. **Modifying this attribute will force creation of a new resource.**
     */
    readonly bundleMethod: pulumi.Output<string | undefined>;
    /**
     * The zone's SSL certificate or SSL certificate and intermediate(s). **Modifying this attribute will force creation of a new resource.**
     */
    readonly certificate: pulumi.Output<string>;
    /**
     * Whether the KeyLess SSL is on.
     */
    readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The KeyLess SSL host.
     */
    readonly host: pulumi.Output<string>;
    /**
     * The KeyLess SSL name.
     */
    readonly name: pulumi.Output<string | undefined>;
    /**
     * The KeyLess SSL port used to communicate between Cloudflare and the client's KeyLess SSL server. Defaults to `24008`.
     */
    readonly port: pulumi.Output<number | undefined>;
    /**
     * Status of the KeyLess SSL.
     */
    readonly status: pulumi.Output<string>;
    /**
     * The zone identifier to target for the resource.
     */
    readonly zoneId: pulumi.Output<string>;
    /**
     * Create a KeylessCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeylessCertificateArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering KeylessCertificate resources.
 */
export interface KeylessCertificateState {
    /**
     * A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it. Available values: `ubiquitous`, `optimal`, `force`. Defaults to `ubiquitous`. **Modifying this attribute will force creation of a new resource.**
     */
    bundleMethod?: pulumi.Input<string>;
    /**
     * The zone's SSL certificate or SSL certificate and intermediate(s). **Modifying this attribute will force creation of a new resource.**
     */
    certificate?: pulumi.Input<string>;
    /**
     * Whether the KeyLess SSL is on.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The KeyLess SSL host.
     */
    host?: pulumi.Input<string>;
    /**
     * The KeyLess SSL name.
     */
    name?: pulumi.Input<string>;
    /**
     * The KeyLess SSL port used to communicate between Cloudflare and the client's KeyLess SSL server. Defaults to `24008`.
     */
    port?: pulumi.Input<number>;
    /**
     * Status of the KeyLess SSL.
     */
    status?: pulumi.Input<string>;
    /**
     * The zone identifier to target for the resource.
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a KeylessCertificate resource.
 */
export interface KeylessCertificateArgs {
    /**
     * A ubiquitous bundle has the highest probability of being verified everywhere, even by clients using outdated or unusual trust stores. An optimal bundle uses the shortest chain and newest intermediates. And the force bundle verifies the chain, but does not otherwise modify it. Available values: `ubiquitous`, `optimal`, `force`. Defaults to `ubiquitous`. **Modifying this attribute will force creation of a new resource.**
     */
    bundleMethod?: pulumi.Input<string>;
    /**
     * The zone's SSL certificate or SSL certificate and intermediate(s). **Modifying this attribute will force creation of a new resource.**
     */
    certificate: pulumi.Input<string>;
    /**
     * Whether the KeyLess SSL is on.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The KeyLess SSL host.
     */
    host: pulumi.Input<string>;
    /**
     * The KeyLess SSL name.
     */
    name?: pulumi.Input<string>;
    /**
     * The KeyLess SSL port used to communicate between Cloudflare and the client's KeyLess SSL server. Defaults to `24008`.
     */
    port?: pulumi.Input<number>;
    /**
     * The zone identifier to target for the resource.
     */
    zoneId: pulumi.Input<string>;
}
