import * as pulumi from "@pulumi/pulumi";
/**
 * Use this data source to retrieve information about the currently authenticated user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const me = cloudflare.getUser({});
 * const all = cloudflare.getApiTokenPermissionGroups({});
 * const example = new cloudflare.ApiToken("example", {
 *     name: "Terraform Cloud (Terraform)",
 *     policies: [{
 *         permissionGroups: [all.then(all => all.user?.["User Details Read"])],
 *         resources: me.then(me => {
 *             [`com.cloudflare.api.user.${me.id}`]: "*",
 *         }),
 *     }],
 * });
 * ```
 */
export declare function getUser(opts?: pulumi.InvokeOptions): Promise<GetUserResult>;
/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    /**
     * The user's email address.
     */
    readonly email: string;
    /**
     * The user's unique identifier.
     */
    readonly id: string;
    /**
     * The user's username.
     */
    readonly username: string;
}
/**
 * Use this data source to retrieve information about the currently authenticated user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const me = cloudflare.getUser({});
 * const all = cloudflare.getApiTokenPermissionGroups({});
 * const example = new cloudflare.ApiToken("example", {
 *     name: "Terraform Cloud (Terraform)",
 *     policies: [{
 *         permissionGroups: [all.then(all => all.user?.["User Details Read"])],
 *         resources: me.then(me => {
 *             [`com.cloudflare.api.user.${me.id}`]: "*",
 *         }),
 *     }],
 * });
 * ```
 */
export declare function getUserOutput(opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult>;
