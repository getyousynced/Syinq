import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Provides a Cloudflare worker script resource. In order for a script to be active, you'll also need to setup a `cloudflare.WorkerRoute`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 * import * as std from "@pulumi/std";
 *
 * const myNamespace = new cloudflare.WorkersKvNamespace("my_namespace", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     title: "example",
 * });
 * // Sets the script with the name "script_1"
 * const myScript = new cloudflare.WorkerScript("my_script", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "script_1",
 *     content: std.file({
 *         input: "script.js",
 *     }).then(invoke => invoke.result),
 *     kvNamespaceBindings: [{
 *         name: "MY_EXAMPLE_KV_NAMESPACE",
 *         namespaceId: myNamespace.id,
 *     }],
 *     plainTextBindings: [{
 *         name: "MY_EXAMPLE_PLAIN_TEXT",
 *         text: "foobar",
 *     }],
 *     secretTextBindings: [{
 *         name: "MY_EXAMPLE_SECRET_TEXT",
 *         text: secretFooValue,
 *     }],
 *     webassemblyBindings: [{
 *         name: "MY_EXAMPLE_WASM",
 *         module: std.filebase64({
 *             input: "example.wasm",
 *         }).then(invoke => invoke.result),
 *     }],
 *     serviceBindings: [{
 *         name: "MY_SERVICE_BINDING",
 *         service: "MY_SERVICE",
 *         environment: "production",
 *     }],
 *     r2BucketBindings: [{
 *         name: "MY_BUCKET",
 *         bucketName: "MY_BUCKET_NAME",
 *     }],
 *     analyticsEngineBindings: [{
 *         name: "MY_DATASET",
 *         dataset: "dataset1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workerScript:WorkerScript example <account_id>/<script_name>
 * ```
 */
export declare class WorkerScript extends pulumi.CustomResource {
    /**
     * Get an existing WorkerScript resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerScriptState, opts?: pulumi.CustomResourceOptions): WorkerScript;
    /**
     * Returns true if the given object is an instance of WorkerScript.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is WorkerScript;
    /**
     * The account identifier to target for the resource.
     */
    readonly accountId: pulumi.Output<string>;
    readonly analyticsEngineBindings: pulumi.Output<outputs.WorkerScriptAnalyticsEngineBinding[] | undefined>;
    /**
     * The date to use for the compatibility flag.
     */
    readonly compatibilityDate: pulumi.Output<string | undefined>;
    /**
     * Compatibility flags used for Worker Scripts.
     */
    readonly compatibilityFlags: pulumi.Output<string[]>;
    /**
     * The script content.
     */
    readonly content: pulumi.Output<string>;
    readonly d1DatabaseBindings: pulumi.Output<outputs.WorkerScriptD1DatabaseBinding[] | undefined>;
    /**
     * Name of the Workers for Platforms dispatch namespace.
     */
    readonly dispatchNamespace: pulumi.Output<string | undefined>;
    readonly kvNamespaceBindings: pulumi.Output<outputs.WorkerScriptKvNamespaceBinding[] | undefined>;
    /**
     * Enabling allows Worker events to be sent to a defined Logpush destination.
     */
    readonly logpush: pulumi.Output<boolean | undefined>;
    /**
     * Whether to upload Worker as a module.
     */
    readonly module: pulumi.Output<boolean | undefined>;
    /**
     * The name for the script. **Modifying this attribute will force creation of a new resource.**
     */
    readonly name: pulumi.Output<string>;
    readonly placements: pulumi.Output<outputs.WorkerScriptPlacement[] | undefined>;
    readonly plainTextBindings: pulumi.Output<outputs.WorkerScriptPlainTextBinding[] | undefined>;
    readonly queueBindings: pulumi.Output<outputs.WorkerScriptQueueBinding[] | undefined>;
    readonly r2BucketBindings: pulumi.Output<outputs.WorkerScriptR2BucketBinding[] | undefined>;
    readonly secretTextBindings: pulumi.Output<outputs.WorkerScriptSecretTextBinding[] | undefined>;
    readonly serviceBindings: pulumi.Output<outputs.WorkerScriptServiceBinding[] | undefined>;
    readonly tags: pulumi.Output<string[]>;
    readonly webassemblyBindings: pulumi.Output<outputs.WorkerScriptWebassemblyBinding[] | undefined>;
    /**
     * Create a WorkerScript resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkerScriptArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering WorkerScript resources.
 */
export interface WorkerScriptState {
    /**
     * The account identifier to target for the resource.
     */
    accountId?: pulumi.Input<string>;
    analyticsEngineBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptAnalyticsEngineBinding>[]>;
    /**
     * The date to use for the compatibility flag.
     */
    compatibilityDate?: pulumi.Input<string>;
    /**
     * Compatibility flags used for Worker Scripts.
     */
    compatibilityFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The script content.
     */
    content?: pulumi.Input<string>;
    d1DatabaseBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptD1DatabaseBinding>[]>;
    /**
     * Name of the Workers for Platforms dispatch namespace.
     */
    dispatchNamespace?: pulumi.Input<string>;
    kvNamespaceBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptKvNamespaceBinding>[]>;
    /**
     * Enabling allows Worker events to be sent to a defined Logpush destination.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Whether to upload Worker as a module.
     */
    module?: pulumi.Input<boolean>;
    /**
     * The name for the script. **Modifying this attribute will force creation of a new resource.**
     */
    name?: pulumi.Input<string>;
    placements?: pulumi.Input<pulumi.Input<inputs.WorkerScriptPlacement>[]>;
    plainTextBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptPlainTextBinding>[]>;
    queueBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptQueueBinding>[]>;
    r2BucketBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptR2BucketBinding>[]>;
    secretTextBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptSecretTextBinding>[]>;
    serviceBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptServiceBinding>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    webassemblyBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptWebassemblyBinding>[]>;
}
/**
 * The set of arguments for constructing a WorkerScript resource.
 */
export interface WorkerScriptArgs {
    /**
     * The account identifier to target for the resource.
     */
    accountId: pulumi.Input<string>;
    analyticsEngineBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptAnalyticsEngineBinding>[]>;
    /**
     * The date to use for the compatibility flag.
     */
    compatibilityDate?: pulumi.Input<string>;
    /**
     * Compatibility flags used for Worker Scripts.
     */
    compatibilityFlags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The script content.
     */
    content: pulumi.Input<string>;
    d1DatabaseBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptD1DatabaseBinding>[]>;
    /**
     * Name of the Workers for Platforms dispatch namespace.
     */
    dispatchNamespace?: pulumi.Input<string>;
    kvNamespaceBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptKvNamespaceBinding>[]>;
    /**
     * Enabling allows Worker events to be sent to a defined Logpush destination.
     */
    logpush?: pulumi.Input<boolean>;
    /**
     * Whether to upload Worker as a module.
     */
    module?: pulumi.Input<boolean>;
    /**
     * The name for the script. **Modifying this attribute will force creation of a new resource.**
     */
    name: pulumi.Input<string>;
    placements?: pulumi.Input<pulumi.Input<inputs.WorkerScriptPlacement>[]>;
    plainTextBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptPlainTextBinding>[]>;
    queueBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptQueueBinding>[]>;
    r2BucketBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptR2BucketBinding>[]>;
    secretTextBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptSecretTextBinding>[]>;
    serviceBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptServiceBinding>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    webassemblyBindings?: pulumi.Input<pulumi.Input<inputs.WorkerScriptWebassemblyBinding>[]>;
}
