"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccessIdentityProvider = exports.getAccessApplicationOutput = exports.getAccessApplication = exports.FirewallRule = exports.Filter = exports.FallbackDomain = exports.EmailRoutingSettings = exports.EmailRoutingRule = exports.EmailRoutingCatchAll = exports.EmailRoutingAddress = exports.DlpProfile = exports.DeviceSettingsPolicy = exports.DevicePostureRule = exports.DevicePostureIntegration = exports.DevicePolicyCertificates = exports.DeviceManagedNetworks = exports.DeviceDexTest = exports.D1Database = exports.CustomSsl = exports.CustomPages = exports.CustomHostnameFallbackOrigin = exports.CustomHostname = exports.CertificatePack = exports.ByoIpPrefix = exports.BotManagement = exports.AuthenticatedOriginPullsCertificate = exports.AuthenticatedOriginPulls = exports.Argo = exports.ApiToken = exports.ApiShieldSchemaValidationSettings = exports.ApiShieldSchema = exports.ApiShieldOperationSchemaValidationSettings = exports.ApiShieldOperation = exports.ApiShield = exports.AddressMap = exports.AccountMember = exports.Account = exports.AccessTag = exports.AccessServiceToken = exports.AccessRule = exports.AccessPolicy = exports.AccessOrganization = exports.AccessMutualTlsHostnameSettings = exports.AccessMutualTlsCertificate = exports.AccessKeysConfiguration = exports.AccessIdentityProvider = exports.AccessGroup = exports.AccessCustomPage = exports.AccessCaCertificate = exports.AccessApplication = void 0;
exports.getZoneCacheReserve = exports.getZoneOutput = exports.getZone = exports.getZeroTrustTunnelVirtualNetworkOutput = exports.getZeroTrustTunnelVirtualNetwork = exports.getZeroTrustTunnelCloudflaredOutput = exports.getZeroTrustTunnelCloudflared = exports.getZeroTrustAccessIdentityProviderOutput = exports.getZeroTrustAccessIdentityProvider = exports.getZeroTrustAccessApplicationOutput = exports.getZeroTrustAccessApplication = exports.getUserOutput = exports.getUser = exports.getTunnelVirtualNetworkOutput = exports.getTunnelVirtualNetwork = exports.getTunnelOutput = exports.getTunnel = exports.getRulesetsOutput = exports.getRulesets = exports.getRecordOutput = exports.getRecord = exports.getOriginCaRootCertificateOutput = exports.getOriginCaRootCertificate = exports.getOriginCaCertificateOutput = exports.getOriginCaCertificate = exports.getLoadBalancerPoolsOutput = exports.getLoadBalancerPools = exports.getListsOutput = exports.getLists = exports.getListOutput = exports.getList = exports.getIpRangesOutput = exports.getIpRanges = exports.getGatewayCategoriesOutput = exports.getGatewayCategories = exports.getGatewayAppTypesOutput = exports.getGatewayAppTypes = exports.getDlpDatasetsOutput = exports.getDlpDatasets = exports.getDevicesOutput = exports.getDevices = exports.getDevicePostureRulesOutput = exports.getDevicePostureRules = exports.getApiTokenPermissionGroupsOutput = exports.getApiTokenPermissionGroups = exports.getAccountsOutput = exports.getAccounts = exports.getAccountRolesOutput = exports.getAccountRoles = exports.getAccessIdentityProviderOutput = void 0;
exports.TeamsRule = exports.TeamsProxyEndpoint = exports.TeamsLocation = exports.TeamsList = exports.TeamsAccount = exports.StaticRoute = exports.SplitTunnel = exports.SpectrumApplication = exports.Ruleset = exports.RiskBehavior = exports.RegionalTieredCache = exports.RegionalHostname = exports.Record = exports.RateLimit = exports.R2Bucket = exports.Queue = exports.Provider = exports.PagesProject = exports.PagesDomain = exports.PageRule = exports.OriginCaCertificate = exports.ObservatoryScheduledTest = exports.NotificationPolicyWebhooks = exports.NotificationPolicy = exports.MtlsCertificate = exports.ManagedHeaders = exports.MagicWanStaticRoute = exports.MagicWanIpsecTunnel = exports.MagicWanGreTunnel = exports.MagicFirewallRuleset = exports.LogpushOwnershipChallenge = exports.LogpushJob = exports.LogpullRetention = exports.LoadBalancerPool = exports.LoadBalancerMonitor = exports.LoadBalancer = exports.ListItem = exports.List = exports.KeylessCertificate = exports.IpsecTunnel = exports.HyperdriveConfig = exports.HostnameTlsSettingCiphers = exports.HostnameTlsSetting = exports.Healthcheck = exports.GreTunnel = exports.getZonesOutput = exports.getZones = exports.getZoneDnssecOutput = exports.getZoneDnssec = exports.getZoneCacheReserveOutput = void 0;
exports.ZeroTrustGatewayPolicy = exports.ZeroTrustDnsLocation = exports.ZeroTrustDlpProfile = exports.ZeroTrustDexTest = exports.ZeroTrustDeviceProfiles = exports.ZeroTrustDevicePostureRule = exports.ZeroTrustDevicePostureIntegration = exports.ZeroTrustDeviceManagedNetworks = exports.ZeroTrustDeviceCertificates = exports.ZeroTrustAccessTag = exports.ZeroTrustAccessShortLivedCertificate = exports.ZeroTrustAccessServiceToken = exports.ZeroTrustAccessPolicy = exports.ZeroTrustAccessOrganization = exports.ZeroTrustAccessMtlsHostnameSettings = exports.ZeroTrustAccessMtlsCertificate = exports.ZeroTrustAccessIdentityProvider = exports.ZeroTrustAccessGroup = exports.ZeroTrustAccessCustomPage = exports.ZeroTrustAccessApplication = exports.WorkersSecret = exports.WorkersScript = exports.WorkersRoute = exports.WorkersKvNamespace = exports.WorkersKv = exports.WorkersForPlatformsNamespace = exports.WorkersForPlatformsDispatchNamespace = exports.WorkersDomain = exports.WorkersCronTrigger = exports.WorkerSecret = exports.WorkerScript = exports.WorkerRoute = exports.WorkerDomain = exports.WorkerCronTrigger = exports.WebAnalyticsSite = exports.WebAnalyticsRule = exports.Web3Hostname = exports.WaitingRoomSettings = exports.WaitingRoomRules = exports.WaitingRoomEvent = exports.WaitingRoom = exports.UserAgentBlockingRule = exports.UrlNormalizationSettings = exports.TurnstileWidget = exports.TunnelVirtualNetwork = exports.TunnelRoute = exports.TunnelConfig = exports.Tunnel = exports.TotalTls = exports.TieredCache = void 0;
exports.types = exports.config = exports.ZoneSettingsOverride = exports.ZoneLockdown = exports.ZoneHold = exports.ZoneDnssec = exports.ZoneCacheVariants = exports.ZoneCacheReserve = exports.Zone = exports.ZeroTrustTunnelVirtualNetwork = exports.ZeroTrustTunnelRoute = exports.ZeroTrustTunnelCloudflaredConfig = exports.ZeroTrustTunnelCloudflared = exports.ZeroTrustSplitTunnel = exports.ZeroTrustRiskScoreIntegration = exports.ZeroTrustRiskBehavior = exports.ZeroTrustLocalFallbackDomain = exports.ZeroTrustList = exports.ZeroTrustKeyAccessKeyConfiguration = exports.ZeroTrustGatewaySettings = exports.ZeroTrustGatewayProxyEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AccessApplication = null;
utilities.lazyLoad(exports, ["AccessApplication"], () => require("./accessApplication"));
exports.AccessCaCertificate = null;
utilities.lazyLoad(exports, ["AccessCaCertificate"], () => require("./accessCaCertificate"));
exports.AccessCustomPage = null;
utilities.lazyLoad(exports, ["AccessCustomPage"], () => require("./accessCustomPage"));
exports.AccessGroup = null;
utilities.lazyLoad(exports, ["AccessGroup"], () => require("./accessGroup"));
exports.AccessIdentityProvider = null;
utilities.lazyLoad(exports, ["AccessIdentityProvider"], () => require("./accessIdentityProvider"));
exports.AccessKeysConfiguration = null;
utilities.lazyLoad(exports, ["AccessKeysConfiguration"], () => require("./accessKeysConfiguration"));
exports.AccessMutualTlsCertificate = null;
utilities.lazyLoad(exports, ["AccessMutualTlsCertificate"], () => require("./accessMutualTlsCertificate"));
exports.AccessMutualTlsHostnameSettings = null;
utilities.lazyLoad(exports, ["AccessMutualTlsHostnameSettings"], () => require("./accessMutualTlsHostnameSettings"));
exports.AccessOrganization = null;
utilities.lazyLoad(exports, ["AccessOrganization"], () => require("./accessOrganization"));
exports.AccessPolicy = null;
utilities.lazyLoad(exports, ["AccessPolicy"], () => require("./accessPolicy"));
exports.AccessRule = null;
utilities.lazyLoad(exports, ["AccessRule"], () => require("./accessRule"));
exports.AccessServiceToken = null;
utilities.lazyLoad(exports, ["AccessServiceToken"], () => require("./accessServiceToken"));
exports.AccessTag = null;
utilities.lazyLoad(exports, ["AccessTag"], () => require("./accessTag"));
exports.Account = null;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));
exports.AccountMember = null;
utilities.lazyLoad(exports, ["AccountMember"], () => require("./accountMember"));
exports.AddressMap = null;
utilities.lazyLoad(exports, ["AddressMap"], () => require("./addressMap"));
exports.ApiShield = null;
utilities.lazyLoad(exports, ["ApiShield"], () => require("./apiShield"));
exports.ApiShieldOperation = null;
utilities.lazyLoad(exports, ["ApiShieldOperation"], () => require("./apiShieldOperation"));
exports.ApiShieldOperationSchemaValidationSettings = null;
utilities.lazyLoad(exports, ["ApiShieldOperationSchemaValidationSettings"], () => require("./apiShieldOperationSchemaValidationSettings"));
exports.ApiShieldSchema = null;
utilities.lazyLoad(exports, ["ApiShieldSchema"], () => require("./apiShieldSchema"));
exports.ApiShieldSchemaValidationSettings = null;
utilities.lazyLoad(exports, ["ApiShieldSchemaValidationSettings"], () => require("./apiShieldSchemaValidationSettings"));
exports.ApiToken = null;
utilities.lazyLoad(exports, ["ApiToken"], () => require("./apiToken"));
exports.Argo = null;
utilities.lazyLoad(exports, ["Argo"], () => require("./argo"));
exports.AuthenticatedOriginPulls = null;
utilities.lazyLoad(exports, ["AuthenticatedOriginPulls"], () => require("./authenticatedOriginPulls"));
exports.AuthenticatedOriginPullsCertificate = null;
utilities.lazyLoad(exports, ["AuthenticatedOriginPullsCertificate"], () => require("./authenticatedOriginPullsCertificate"));
exports.BotManagement = null;
utilities.lazyLoad(exports, ["BotManagement"], () => require("./botManagement"));
exports.ByoIpPrefix = null;
utilities.lazyLoad(exports, ["ByoIpPrefix"], () => require("./byoIpPrefix"));
exports.CertificatePack = null;
utilities.lazyLoad(exports, ["CertificatePack"], () => require("./certificatePack"));
exports.CustomHostname = null;
utilities.lazyLoad(exports, ["CustomHostname"], () => require("./customHostname"));
exports.CustomHostnameFallbackOrigin = null;
utilities.lazyLoad(exports, ["CustomHostnameFallbackOrigin"], () => require("./customHostnameFallbackOrigin"));
exports.CustomPages = null;
utilities.lazyLoad(exports, ["CustomPages"], () => require("./customPages"));
exports.CustomSsl = null;
utilities.lazyLoad(exports, ["CustomSsl"], () => require("./customSsl"));
exports.D1Database = null;
utilities.lazyLoad(exports, ["D1Database"], () => require("./d1database"));
exports.DeviceDexTest = null;
utilities.lazyLoad(exports, ["DeviceDexTest"], () => require("./deviceDexTest"));
exports.DeviceManagedNetworks = null;
utilities.lazyLoad(exports, ["DeviceManagedNetworks"], () => require("./deviceManagedNetworks"));
exports.DevicePolicyCertificates = null;
utilities.lazyLoad(exports, ["DevicePolicyCertificates"], () => require("./devicePolicyCertificates"));
exports.DevicePostureIntegration = null;
utilities.lazyLoad(exports, ["DevicePostureIntegration"], () => require("./devicePostureIntegration"));
exports.DevicePostureRule = null;
utilities.lazyLoad(exports, ["DevicePostureRule"], () => require("./devicePostureRule"));
exports.DeviceSettingsPolicy = null;
utilities.lazyLoad(exports, ["DeviceSettingsPolicy"], () => require("./deviceSettingsPolicy"));
exports.DlpProfile = null;
utilities.lazyLoad(exports, ["DlpProfile"], () => require("./dlpProfile"));
exports.EmailRoutingAddress = null;
utilities.lazyLoad(exports, ["EmailRoutingAddress"], () => require("./emailRoutingAddress"));
exports.EmailRoutingCatchAll = null;
utilities.lazyLoad(exports, ["EmailRoutingCatchAll"], () => require("./emailRoutingCatchAll"));
exports.EmailRoutingRule = null;
utilities.lazyLoad(exports, ["EmailRoutingRule"], () => require("./emailRoutingRule"));
exports.EmailRoutingSettings = null;
utilities.lazyLoad(exports, ["EmailRoutingSettings"], () => require("./emailRoutingSettings"));
exports.FallbackDomain = null;
utilities.lazyLoad(exports, ["FallbackDomain"], () => require("./fallbackDomain"));
exports.Filter = null;
utilities.lazyLoad(exports, ["Filter"], () => require("./filter"));
exports.FirewallRule = null;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));
exports.getAccessApplication = null;
exports.getAccessApplicationOutput = null;
utilities.lazyLoad(exports, ["getAccessApplication", "getAccessApplicationOutput"], () => require("./getAccessApplication"));
exports.getAccessIdentityProvider = null;
exports.getAccessIdentityProviderOutput = null;
utilities.lazyLoad(exports, ["getAccessIdentityProvider", "getAccessIdentityProviderOutput"], () => require("./getAccessIdentityProvider"));
exports.getAccountRoles = null;
exports.getAccountRolesOutput = null;
utilities.lazyLoad(exports, ["getAccountRoles", "getAccountRolesOutput"], () => require("./getAccountRoles"));
exports.getAccounts = null;
exports.getAccountsOutput = null;
utilities.lazyLoad(exports, ["getAccounts", "getAccountsOutput"], () => require("./getAccounts"));
exports.getApiTokenPermissionGroups = null;
exports.getApiTokenPermissionGroupsOutput = null;
utilities.lazyLoad(exports, ["getApiTokenPermissionGroups", "getApiTokenPermissionGroupsOutput"], () => require("./getApiTokenPermissionGroups"));
exports.getDevicePostureRules = null;
exports.getDevicePostureRulesOutput = null;
utilities.lazyLoad(exports, ["getDevicePostureRules", "getDevicePostureRulesOutput"], () => require("./getDevicePostureRules"));
exports.getDevices = null;
exports.getDevicesOutput = null;
utilities.lazyLoad(exports, ["getDevices", "getDevicesOutput"], () => require("./getDevices"));
exports.getDlpDatasets = null;
exports.getDlpDatasetsOutput = null;
utilities.lazyLoad(exports, ["getDlpDatasets", "getDlpDatasetsOutput"], () => require("./getDlpDatasets"));
exports.getGatewayAppTypes = null;
exports.getGatewayAppTypesOutput = null;
utilities.lazyLoad(exports, ["getGatewayAppTypes", "getGatewayAppTypesOutput"], () => require("./getGatewayAppTypes"));
exports.getGatewayCategories = null;
exports.getGatewayCategoriesOutput = null;
utilities.lazyLoad(exports, ["getGatewayCategories", "getGatewayCategoriesOutput"], () => require("./getGatewayCategories"));
exports.getIpRanges = null;
exports.getIpRangesOutput = null;
utilities.lazyLoad(exports, ["getIpRanges", "getIpRangesOutput"], () => require("./getIpRanges"));
exports.getList = null;
exports.getListOutput = null;
utilities.lazyLoad(exports, ["getList", "getListOutput"], () => require("./getList"));
exports.getLists = null;
exports.getListsOutput = null;
utilities.lazyLoad(exports, ["getLists", "getListsOutput"], () => require("./getLists"));
exports.getLoadBalancerPools = null;
exports.getLoadBalancerPoolsOutput = null;
utilities.lazyLoad(exports, ["getLoadBalancerPools", "getLoadBalancerPoolsOutput"], () => require("./getLoadBalancerPools"));
exports.getOriginCaCertificate = null;
exports.getOriginCaCertificateOutput = null;
utilities.lazyLoad(exports, ["getOriginCaCertificate", "getOriginCaCertificateOutput"], () => require("./getOriginCaCertificate"));
exports.getOriginCaRootCertificate = null;
exports.getOriginCaRootCertificateOutput = null;
utilities.lazyLoad(exports, ["getOriginCaRootCertificate", "getOriginCaRootCertificateOutput"], () => require("./getOriginCaRootCertificate"));
exports.getRecord = null;
exports.getRecordOutput = null;
utilities.lazyLoad(exports, ["getRecord", "getRecordOutput"], () => require("./getRecord"));
exports.getRulesets = null;
exports.getRulesetsOutput = null;
utilities.lazyLoad(exports, ["getRulesets", "getRulesetsOutput"], () => require("./getRulesets"));
exports.getTunnel = null;
exports.getTunnelOutput = null;
utilities.lazyLoad(exports, ["getTunnel", "getTunnelOutput"], () => require("./getTunnel"));
exports.getTunnelVirtualNetwork = null;
exports.getTunnelVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["getTunnelVirtualNetwork", "getTunnelVirtualNetworkOutput"], () => require("./getTunnelVirtualNetwork"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.getZeroTrustAccessApplication = null;
exports.getZeroTrustAccessApplicationOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessApplication", "getZeroTrustAccessApplicationOutput"], () => require("./getZeroTrustAccessApplication"));
exports.getZeroTrustAccessIdentityProvider = null;
exports.getZeroTrustAccessIdentityProviderOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustAccessIdentityProvider", "getZeroTrustAccessIdentityProviderOutput"], () => require("./getZeroTrustAccessIdentityProvider"));
exports.getZeroTrustTunnelCloudflared = null;
exports.getZeroTrustTunnelCloudflaredOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelCloudflared", "getZeroTrustTunnelCloudflaredOutput"], () => require("./getZeroTrustTunnelCloudflared"));
exports.getZeroTrustTunnelVirtualNetwork = null;
exports.getZeroTrustTunnelVirtualNetworkOutput = null;
utilities.lazyLoad(exports, ["getZeroTrustTunnelVirtualNetwork", "getZeroTrustTunnelVirtualNetworkOutput"], () => require("./getZeroTrustTunnelVirtualNetwork"));
exports.getZone = null;
exports.getZoneOutput = null;
utilities.lazyLoad(exports, ["getZone", "getZoneOutput"], () => require("./getZone"));
exports.getZoneCacheReserve = null;
exports.getZoneCacheReserveOutput = null;
utilities.lazyLoad(exports, ["getZoneCacheReserve", "getZoneCacheReserveOutput"], () => require("./getZoneCacheReserve"));
exports.getZoneDnssec = null;
exports.getZoneDnssecOutput = null;
utilities.lazyLoad(exports, ["getZoneDnssec", "getZoneDnssecOutput"], () => require("./getZoneDnssec"));
exports.getZones = null;
exports.getZonesOutput = null;
utilities.lazyLoad(exports, ["getZones", "getZonesOutput"], () => require("./getZones"));
exports.GreTunnel = null;
utilities.lazyLoad(exports, ["GreTunnel"], () => require("./greTunnel"));
exports.Healthcheck = null;
utilities.lazyLoad(exports, ["Healthcheck"], () => require("./healthcheck"));
exports.HostnameTlsSetting = null;
utilities.lazyLoad(exports, ["HostnameTlsSetting"], () => require("./hostnameTlsSetting"));
exports.HostnameTlsSettingCiphers = null;
utilities.lazyLoad(exports, ["HostnameTlsSettingCiphers"], () => require("./hostnameTlsSettingCiphers"));
exports.HyperdriveConfig = null;
utilities.lazyLoad(exports, ["HyperdriveConfig"], () => require("./hyperdriveConfig"));
exports.IpsecTunnel = null;
utilities.lazyLoad(exports, ["IpsecTunnel"], () => require("./ipsecTunnel"));
exports.KeylessCertificate = null;
utilities.lazyLoad(exports, ["KeylessCertificate"], () => require("./keylessCertificate"));
exports.List = null;
utilities.lazyLoad(exports, ["List"], () => require("./list"));
exports.ListItem = null;
utilities.lazyLoad(exports, ["ListItem"], () => require("./listItem"));
exports.LoadBalancer = null;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));
exports.LoadBalancerMonitor = null;
utilities.lazyLoad(exports, ["LoadBalancerMonitor"], () => require("./loadBalancerMonitor"));
exports.LoadBalancerPool = null;
utilities.lazyLoad(exports, ["LoadBalancerPool"], () => require("./loadBalancerPool"));
exports.LogpullRetention = null;
utilities.lazyLoad(exports, ["LogpullRetention"], () => require("./logpullRetention"));
exports.LogpushJob = null;
utilities.lazyLoad(exports, ["LogpushJob"], () => require("./logpushJob"));
exports.LogpushOwnershipChallenge = null;
utilities.lazyLoad(exports, ["LogpushOwnershipChallenge"], () => require("./logpushOwnershipChallenge"));
exports.MagicFirewallRuleset = null;
utilities.lazyLoad(exports, ["MagicFirewallRuleset"], () => require("./magicFirewallRuleset"));
exports.MagicWanGreTunnel = null;
utilities.lazyLoad(exports, ["MagicWanGreTunnel"], () => require("./magicWanGreTunnel"));
exports.MagicWanIpsecTunnel = null;
utilities.lazyLoad(exports, ["MagicWanIpsecTunnel"], () => require("./magicWanIpsecTunnel"));
exports.MagicWanStaticRoute = null;
utilities.lazyLoad(exports, ["MagicWanStaticRoute"], () => require("./magicWanStaticRoute"));
exports.ManagedHeaders = null;
utilities.lazyLoad(exports, ["ManagedHeaders"], () => require("./managedHeaders"));
exports.MtlsCertificate = null;
utilities.lazyLoad(exports, ["MtlsCertificate"], () => require("./mtlsCertificate"));
exports.NotificationPolicy = null;
utilities.lazyLoad(exports, ["NotificationPolicy"], () => require("./notificationPolicy"));
exports.NotificationPolicyWebhooks = null;
utilities.lazyLoad(exports, ["NotificationPolicyWebhooks"], () => require("./notificationPolicyWebhooks"));
exports.ObservatoryScheduledTest = null;
utilities.lazyLoad(exports, ["ObservatoryScheduledTest"], () => require("./observatoryScheduledTest"));
exports.OriginCaCertificate = null;
utilities.lazyLoad(exports, ["OriginCaCertificate"], () => require("./originCaCertificate"));
exports.PageRule = null;
utilities.lazyLoad(exports, ["PageRule"], () => require("./pageRule"));
exports.PagesDomain = null;
utilities.lazyLoad(exports, ["PagesDomain"], () => require("./pagesDomain"));
exports.PagesProject = null;
utilities.lazyLoad(exports, ["PagesProject"], () => require("./pagesProject"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.Queue = null;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));
exports.R2Bucket = null;
utilities.lazyLoad(exports, ["R2Bucket"], () => require("./r2bucket"));
exports.RateLimit = null;
utilities.lazyLoad(exports, ["RateLimit"], () => require("./rateLimit"));
exports.Record = null;
utilities.lazyLoad(exports, ["Record"], () => require("./record"));
exports.RegionalHostname = null;
utilities.lazyLoad(exports, ["RegionalHostname"], () => require("./regionalHostname"));
exports.RegionalTieredCache = null;
utilities.lazyLoad(exports, ["RegionalTieredCache"], () => require("./regionalTieredCache"));
exports.RiskBehavior = null;
utilities.lazyLoad(exports, ["RiskBehavior"], () => require("./riskBehavior"));
exports.Ruleset = null;
utilities.lazyLoad(exports, ["Ruleset"], () => require("./ruleset"));
exports.SpectrumApplication = null;
utilities.lazyLoad(exports, ["SpectrumApplication"], () => require("./spectrumApplication"));
exports.SplitTunnel = null;
utilities.lazyLoad(exports, ["SplitTunnel"], () => require("./splitTunnel"));
exports.StaticRoute = null;
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));
exports.TeamsAccount = null;
utilities.lazyLoad(exports, ["TeamsAccount"], () => require("./teamsAccount"));
exports.TeamsList = null;
utilities.lazyLoad(exports, ["TeamsList"], () => require("./teamsList"));
exports.TeamsLocation = null;
utilities.lazyLoad(exports, ["TeamsLocation"], () => require("./teamsLocation"));
exports.TeamsProxyEndpoint = null;
utilities.lazyLoad(exports, ["TeamsProxyEndpoint"], () => require("./teamsProxyEndpoint"));
exports.TeamsRule = null;
utilities.lazyLoad(exports, ["TeamsRule"], () => require("./teamsRule"));
exports.TieredCache = null;
utilities.lazyLoad(exports, ["TieredCache"], () => require("./tieredCache"));
exports.TotalTls = null;
utilities.lazyLoad(exports, ["TotalTls"], () => require("./totalTls"));
exports.Tunnel = null;
utilities.lazyLoad(exports, ["Tunnel"], () => require("./tunnel"));
exports.TunnelConfig = null;
utilities.lazyLoad(exports, ["TunnelConfig"], () => require("./tunnelConfig"));
exports.TunnelRoute = null;
utilities.lazyLoad(exports, ["TunnelRoute"], () => require("./tunnelRoute"));
exports.TunnelVirtualNetwork = null;
utilities.lazyLoad(exports, ["TunnelVirtualNetwork"], () => require("./tunnelVirtualNetwork"));
exports.TurnstileWidget = null;
utilities.lazyLoad(exports, ["TurnstileWidget"], () => require("./turnstileWidget"));
exports.UrlNormalizationSettings = null;
utilities.lazyLoad(exports, ["UrlNormalizationSettings"], () => require("./urlNormalizationSettings"));
exports.UserAgentBlockingRule = null;
utilities.lazyLoad(exports, ["UserAgentBlockingRule"], () => require("./userAgentBlockingRule"));
exports.WaitingRoom = null;
utilities.lazyLoad(exports, ["WaitingRoom"], () => require("./waitingRoom"));
exports.WaitingRoomEvent = null;
utilities.lazyLoad(exports, ["WaitingRoomEvent"], () => require("./waitingRoomEvent"));
exports.WaitingRoomRules = null;
utilities.lazyLoad(exports, ["WaitingRoomRules"], () => require("./waitingRoomRules"));
exports.WaitingRoomSettings = null;
utilities.lazyLoad(exports, ["WaitingRoomSettings"], () => require("./waitingRoomSettings"));
exports.Web3Hostname = null;
utilities.lazyLoad(exports, ["Web3Hostname"], () => require("./web3Hostname"));
exports.WebAnalyticsRule = null;
utilities.lazyLoad(exports, ["WebAnalyticsRule"], () => require("./webAnalyticsRule"));
exports.WebAnalyticsSite = null;
utilities.lazyLoad(exports, ["WebAnalyticsSite"], () => require("./webAnalyticsSite"));
exports.WorkerCronTrigger = null;
utilities.lazyLoad(exports, ["WorkerCronTrigger"], () => require("./workerCronTrigger"));
exports.WorkerDomain = null;
utilities.lazyLoad(exports, ["WorkerDomain"], () => require("./workerDomain"));
exports.WorkerRoute = null;
utilities.lazyLoad(exports, ["WorkerRoute"], () => require("./workerRoute"));
exports.WorkerScript = null;
utilities.lazyLoad(exports, ["WorkerScript"], () => require("./workerScript"));
exports.WorkerSecret = null;
utilities.lazyLoad(exports, ["WorkerSecret"], () => require("./workerSecret"));
exports.WorkersCronTrigger = null;
utilities.lazyLoad(exports, ["WorkersCronTrigger"], () => require("./workersCronTrigger"));
exports.WorkersDomain = null;
utilities.lazyLoad(exports, ["WorkersDomain"], () => require("./workersDomain"));
exports.WorkersForPlatformsDispatchNamespace = null;
utilities.lazyLoad(exports, ["WorkersForPlatformsDispatchNamespace"], () => require("./workersForPlatformsDispatchNamespace"));
exports.WorkersForPlatformsNamespace = null;
utilities.lazyLoad(exports, ["WorkersForPlatformsNamespace"], () => require("./workersForPlatformsNamespace"));
exports.WorkersKv = null;
utilities.lazyLoad(exports, ["WorkersKv"], () => require("./workersKv"));
exports.WorkersKvNamespace = null;
utilities.lazyLoad(exports, ["WorkersKvNamespace"], () => require("./workersKvNamespace"));
exports.WorkersRoute = null;
utilities.lazyLoad(exports, ["WorkersRoute"], () => require("./workersRoute"));
exports.WorkersScript = null;
utilities.lazyLoad(exports, ["WorkersScript"], () => require("./workersScript"));
exports.WorkersSecret = null;
utilities.lazyLoad(exports, ["WorkersSecret"], () => require("./workersSecret"));
exports.ZeroTrustAccessApplication = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessApplication"], () => require("./zeroTrustAccessApplication"));
exports.ZeroTrustAccessCustomPage = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessCustomPage"], () => require("./zeroTrustAccessCustomPage"));
exports.ZeroTrustAccessGroup = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessGroup"], () => require("./zeroTrustAccessGroup"));
exports.ZeroTrustAccessIdentityProvider = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessIdentityProvider"], () => require("./zeroTrustAccessIdentityProvider"));
exports.ZeroTrustAccessMtlsCertificate = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessMtlsCertificate"], () => require("./zeroTrustAccessMtlsCertificate"));
exports.ZeroTrustAccessMtlsHostnameSettings = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessMtlsHostnameSettings"], () => require("./zeroTrustAccessMtlsHostnameSettings"));
exports.ZeroTrustAccessOrganization = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessOrganization"], () => require("./zeroTrustAccessOrganization"));
exports.ZeroTrustAccessPolicy = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessPolicy"], () => require("./zeroTrustAccessPolicy"));
exports.ZeroTrustAccessServiceToken = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessServiceToken"], () => require("./zeroTrustAccessServiceToken"));
exports.ZeroTrustAccessShortLivedCertificate = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessShortLivedCertificate"], () => require("./zeroTrustAccessShortLivedCertificate"));
exports.ZeroTrustAccessTag = null;
utilities.lazyLoad(exports, ["ZeroTrustAccessTag"], () => require("./zeroTrustAccessTag"));
exports.ZeroTrustDeviceCertificates = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceCertificates"], () => require("./zeroTrustDeviceCertificates"));
exports.ZeroTrustDeviceManagedNetworks = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceManagedNetworks"], () => require("./zeroTrustDeviceManagedNetworks"));
exports.ZeroTrustDevicePostureIntegration = null;
utilities.lazyLoad(exports, ["ZeroTrustDevicePostureIntegration"], () => require("./zeroTrustDevicePostureIntegration"));
exports.ZeroTrustDevicePostureRule = null;
utilities.lazyLoad(exports, ["ZeroTrustDevicePostureRule"], () => require("./zeroTrustDevicePostureRule"));
exports.ZeroTrustDeviceProfiles = null;
utilities.lazyLoad(exports, ["ZeroTrustDeviceProfiles"], () => require("./zeroTrustDeviceProfiles"));
exports.ZeroTrustDexTest = null;
utilities.lazyLoad(exports, ["ZeroTrustDexTest"], () => require("./zeroTrustDexTest"));
exports.ZeroTrustDlpProfile = null;
utilities.lazyLoad(exports, ["ZeroTrustDlpProfile"], () => require("./zeroTrustDlpProfile"));
exports.ZeroTrustDnsLocation = null;
utilities.lazyLoad(exports, ["ZeroTrustDnsLocation"], () => require("./zeroTrustDnsLocation"));
exports.ZeroTrustGatewayPolicy = null;
utilities.lazyLoad(exports, ["ZeroTrustGatewayPolicy"], () => require("./zeroTrustGatewayPolicy"));
exports.ZeroTrustGatewayProxyEndpoint = null;
utilities.lazyLoad(exports, ["ZeroTrustGatewayProxyEndpoint"], () => require("./zeroTrustGatewayProxyEndpoint"));
exports.ZeroTrustGatewaySettings = null;
utilities.lazyLoad(exports, ["ZeroTrustGatewaySettings"], () => require("./zeroTrustGatewaySettings"));
exports.ZeroTrustKeyAccessKeyConfiguration = null;
utilities.lazyLoad(exports, ["ZeroTrustKeyAccessKeyConfiguration"], () => require("./zeroTrustKeyAccessKeyConfiguration"));
exports.ZeroTrustList = null;
utilities.lazyLoad(exports, ["ZeroTrustList"], () => require("./zeroTrustList"));
exports.ZeroTrustLocalFallbackDomain = null;
utilities.lazyLoad(exports, ["ZeroTrustLocalFallbackDomain"], () => require("./zeroTrustLocalFallbackDomain"));
exports.ZeroTrustRiskBehavior = null;
utilities.lazyLoad(exports, ["ZeroTrustRiskBehavior"], () => require("./zeroTrustRiskBehavior"));
exports.ZeroTrustRiskScoreIntegration = null;
utilities.lazyLoad(exports, ["ZeroTrustRiskScoreIntegration"], () => require("./zeroTrustRiskScoreIntegration"));
exports.ZeroTrustSplitTunnel = null;
utilities.lazyLoad(exports, ["ZeroTrustSplitTunnel"], () => require("./zeroTrustSplitTunnel"));
exports.ZeroTrustTunnelCloudflared = null;
utilities.lazyLoad(exports, ["ZeroTrustTunnelCloudflared"], () => require("./zeroTrustTunnelCloudflared"));
exports.ZeroTrustTunnelCloudflaredConfig = null;
utilities.lazyLoad(exports, ["ZeroTrustTunnelCloudflaredConfig"], () => require("./zeroTrustTunnelCloudflaredConfig"));
exports.ZeroTrustTunnelRoute = null;
utilities.lazyLoad(exports, ["ZeroTrustTunnelRoute"], () => require("./zeroTrustTunnelRoute"));
exports.ZeroTrustTunnelVirtualNetwork = null;
utilities.lazyLoad(exports, ["ZeroTrustTunnelVirtualNetwork"], () => require("./zeroTrustTunnelVirtualNetwork"));
exports.Zone = null;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));
exports.ZoneCacheReserve = null;
utilities.lazyLoad(exports, ["ZoneCacheReserve"], () => require("./zoneCacheReserve"));
exports.ZoneCacheVariants = null;
utilities.lazyLoad(exports, ["ZoneCacheVariants"], () => require("./zoneCacheVariants"));
exports.ZoneDnssec = null;
utilities.lazyLoad(exports, ["ZoneDnssec"], () => require("./zoneDnssec"));
exports.ZoneHold = null;
utilities.lazyLoad(exports, ["ZoneHold"], () => require("./zoneHold"));
exports.ZoneLockdown = null;
utilities.lazyLoad(exports, ["ZoneLockdown"], () => require("./zoneLockdown"));
exports.ZoneSettingsOverride = null;
utilities.lazyLoad(exports, ["ZoneSettingsOverride"], () => require("./zoneSettingsOverride"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "cloudflare:index/accessApplication:AccessApplication":
                return new exports.AccessApplication(name, undefined, { urn });
            case "cloudflare:index/accessCaCertificate:AccessCaCertificate":
                return new exports.AccessCaCertificate(name, undefined, { urn });
            case "cloudflare:index/accessCustomPage:AccessCustomPage":
                return new exports.AccessCustomPage(name, undefined, { urn });
            case "cloudflare:index/accessGroup:AccessGroup":
                return new exports.AccessGroup(name, undefined, { urn });
            case "cloudflare:index/accessIdentityProvider:AccessIdentityProvider":
                return new exports.AccessIdentityProvider(name, undefined, { urn });
            case "cloudflare:index/accessKeysConfiguration:AccessKeysConfiguration":
                return new exports.AccessKeysConfiguration(name, undefined, { urn });
            case "cloudflare:index/accessMutualTlsCertificate:AccessMutualTlsCertificate":
                return new exports.AccessMutualTlsCertificate(name, undefined, { urn });
            case "cloudflare:index/accessMutualTlsHostnameSettings:AccessMutualTlsHostnameSettings":
                return new exports.AccessMutualTlsHostnameSettings(name, undefined, { urn });
            case "cloudflare:index/accessOrganization:AccessOrganization":
                return new exports.AccessOrganization(name, undefined, { urn });
            case "cloudflare:index/accessPolicy:AccessPolicy":
                return new exports.AccessPolicy(name, undefined, { urn });
            case "cloudflare:index/accessRule:AccessRule":
                return new exports.AccessRule(name, undefined, { urn });
            case "cloudflare:index/accessServiceToken:AccessServiceToken":
                return new exports.AccessServiceToken(name, undefined, { urn });
            case "cloudflare:index/accessTag:AccessTag":
                return new exports.AccessTag(name, undefined, { urn });
            case "cloudflare:index/account:Account":
                return new exports.Account(name, undefined, { urn });
            case "cloudflare:index/accountMember:AccountMember":
                return new exports.AccountMember(name, undefined, { urn });
            case "cloudflare:index/addressMap:AddressMap":
                return new exports.AddressMap(name, undefined, { urn });
            case "cloudflare:index/apiShield:ApiShield":
                return new exports.ApiShield(name, undefined, { urn });
            case "cloudflare:index/apiShieldOperation:ApiShieldOperation":
                return new exports.ApiShieldOperation(name, undefined, { urn });
            case "cloudflare:index/apiShieldOperationSchemaValidationSettings:ApiShieldOperationSchemaValidationSettings":
                return new exports.ApiShieldOperationSchemaValidationSettings(name, undefined, { urn });
            case "cloudflare:index/apiShieldSchema:ApiShieldSchema":
                return new exports.ApiShieldSchema(name, undefined, { urn });
            case "cloudflare:index/apiShieldSchemaValidationSettings:ApiShieldSchemaValidationSettings":
                return new exports.ApiShieldSchemaValidationSettings(name, undefined, { urn });
            case "cloudflare:index/apiToken:ApiToken":
                return new exports.ApiToken(name, undefined, { urn });
            case "cloudflare:index/argo:Argo":
                return new exports.Argo(name, undefined, { urn });
            case "cloudflare:index/authenticatedOriginPulls:AuthenticatedOriginPulls":
                return new exports.AuthenticatedOriginPulls(name, undefined, { urn });
            case "cloudflare:index/authenticatedOriginPullsCertificate:AuthenticatedOriginPullsCertificate":
                return new exports.AuthenticatedOriginPullsCertificate(name, undefined, { urn });
            case "cloudflare:index/botManagement:BotManagement":
                return new exports.BotManagement(name, undefined, { urn });
            case "cloudflare:index/byoIpPrefix:ByoIpPrefix":
                return new exports.ByoIpPrefix(name, undefined, { urn });
            case "cloudflare:index/certificatePack:CertificatePack":
                return new exports.CertificatePack(name, undefined, { urn });
            case "cloudflare:index/customHostname:CustomHostname":
                return new exports.CustomHostname(name, undefined, { urn });
            case "cloudflare:index/customHostnameFallbackOrigin:CustomHostnameFallbackOrigin":
                return new exports.CustomHostnameFallbackOrigin(name, undefined, { urn });
            case "cloudflare:index/customPages:CustomPages":
                return new exports.CustomPages(name, undefined, { urn });
            case "cloudflare:index/customSsl:CustomSsl":
                return new exports.CustomSsl(name, undefined, { urn });
            case "cloudflare:index/d1Database:D1Database":
                return new exports.D1Database(name, undefined, { urn });
            case "cloudflare:index/deviceDexTest:DeviceDexTest":
                return new exports.DeviceDexTest(name, undefined, { urn });
            case "cloudflare:index/deviceManagedNetworks:DeviceManagedNetworks":
                return new exports.DeviceManagedNetworks(name, undefined, { urn });
            case "cloudflare:index/devicePolicyCertificates:DevicePolicyCertificates":
                return new exports.DevicePolicyCertificates(name, undefined, { urn });
            case "cloudflare:index/devicePostureIntegration:DevicePostureIntegration":
                return new exports.DevicePostureIntegration(name, undefined, { urn });
            case "cloudflare:index/devicePostureRule:DevicePostureRule":
                return new exports.DevicePostureRule(name, undefined, { urn });
            case "cloudflare:index/deviceSettingsPolicy:DeviceSettingsPolicy":
                return new exports.DeviceSettingsPolicy(name, undefined, { urn });
            case "cloudflare:index/dlpProfile:DlpProfile":
                return new exports.DlpProfile(name, undefined, { urn });
            case "cloudflare:index/emailRoutingAddress:EmailRoutingAddress":
                return new exports.EmailRoutingAddress(name, undefined, { urn });
            case "cloudflare:index/emailRoutingCatchAll:EmailRoutingCatchAll":
                return new exports.EmailRoutingCatchAll(name, undefined, { urn });
            case "cloudflare:index/emailRoutingRule:EmailRoutingRule":
                return new exports.EmailRoutingRule(name, undefined, { urn });
            case "cloudflare:index/emailRoutingSettings:EmailRoutingSettings":
                return new exports.EmailRoutingSettings(name, undefined, { urn });
            case "cloudflare:index/fallbackDomain:FallbackDomain":
                return new exports.FallbackDomain(name, undefined, { urn });
            case "cloudflare:index/filter:Filter":
                return new exports.Filter(name, undefined, { urn });
            case "cloudflare:index/firewallRule:FirewallRule":
                return new exports.FirewallRule(name, undefined, { urn });
            case "cloudflare:index/greTunnel:GreTunnel":
                return new exports.GreTunnel(name, undefined, { urn });
            case "cloudflare:index/healthcheck:Healthcheck":
                return new exports.Healthcheck(name, undefined, { urn });
            case "cloudflare:index/hostnameTlsSetting:HostnameTlsSetting":
                return new exports.HostnameTlsSetting(name, undefined, { urn });
            case "cloudflare:index/hostnameTlsSettingCiphers:HostnameTlsSettingCiphers":
                return new exports.HostnameTlsSettingCiphers(name, undefined, { urn });
            case "cloudflare:index/hyperdriveConfig:HyperdriveConfig":
                return new exports.HyperdriveConfig(name, undefined, { urn });
            case "cloudflare:index/ipsecTunnel:IpsecTunnel":
                return new exports.IpsecTunnel(name, undefined, { urn });
            case "cloudflare:index/keylessCertificate:KeylessCertificate":
                return new exports.KeylessCertificate(name, undefined, { urn });
            case "cloudflare:index/list:List":
                return new exports.List(name, undefined, { urn });
            case "cloudflare:index/listItem:ListItem":
                return new exports.ListItem(name, undefined, { urn });
            case "cloudflare:index/loadBalancer:LoadBalancer":
                return new exports.LoadBalancer(name, undefined, { urn });
            case "cloudflare:index/loadBalancerMonitor:LoadBalancerMonitor":
                return new exports.LoadBalancerMonitor(name, undefined, { urn });
            case "cloudflare:index/loadBalancerPool:LoadBalancerPool":
                return new exports.LoadBalancerPool(name, undefined, { urn });
            case "cloudflare:index/logpullRetention:LogpullRetention":
                return new exports.LogpullRetention(name, undefined, { urn });
            case "cloudflare:index/logpushJob:LogpushJob":
                return new exports.LogpushJob(name, undefined, { urn });
            case "cloudflare:index/logpushOwnershipChallenge:LogpushOwnershipChallenge":
                return new exports.LogpushOwnershipChallenge(name, undefined, { urn });
            case "cloudflare:index/magicFirewallRuleset:MagicFirewallRuleset":
                return new exports.MagicFirewallRuleset(name, undefined, { urn });
            case "cloudflare:index/magicWanGreTunnel:MagicWanGreTunnel":
                return new exports.MagicWanGreTunnel(name, undefined, { urn });
            case "cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel":
                return new exports.MagicWanIpsecTunnel(name, undefined, { urn });
            case "cloudflare:index/magicWanStaticRoute:MagicWanStaticRoute":
                return new exports.MagicWanStaticRoute(name, undefined, { urn });
            case "cloudflare:index/managedHeaders:ManagedHeaders":
                return new exports.ManagedHeaders(name, undefined, { urn });
            case "cloudflare:index/mtlsCertificate:MtlsCertificate":
                return new exports.MtlsCertificate(name, undefined, { urn });
            case "cloudflare:index/notificationPolicy:NotificationPolicy":
                return new exports.NotificationPolicy(name, undefined, { urn });
            case "cloudflare:index/notificationPolicyWebhooks:NotificationPolicyWebhooks":
                return new exports.NotificationPolicyWebhooks(name, undefined, { urn });
            case "cloudflare:index/observatoryScheduledTest:ObservatoryScheduledTest":
                return new exports.ObservatoryScheduledTest(name, undefined, { urn });
            case "cloudflare:index/originCaCertificate:OriginCaCertificate":
                return new exports.OriginCaCertificate(name, undefined, { urn });
            case "cloudflare:index/pageRule:PageRule":
                return new exports.PageRule(name, undefined, { urn });
            case "cloudflare:index/pagesDomain:PagesDomain":
                return new exports.PagesDomain(name, undefined, { urn });
            case "cloudflare:index/pagesProject:PagesProject":
                return new exports.PagesProject(name, undefined, { urn });
            case "cloudflare:index/queue:Queue":
                return new exports.Queue(name, undefined, { urn });
            case "cloudflare:index/r2Bucket:R2Bucket":
                return new exports.R2Bucket(name, undefined, { urn });
            case "cloudflare:index/rateLimit:RateLimit":
                return new exports.RateLimit(name, undefined, { urn });
            case "cloudflare:index/record:Record":
                return new exports.Record(name, undefined, { urn });
            case "cloudflare:index/regionalHostname:RegionalHostname":
                return new exports.RegionalHostname(name, undefined, { urn });
            case "cloudflare:index/regionalTieredCache:RegionalTieredCache":
                return new exports.RegionalTieredCache(name, undefined, { urn });
            case "cloudflare:index/riskBehavior:RiskBehavior":
                return new exports.RiskBehavior(name, undefined, { urn });
            case "cloudflare:index/ruleset:Ruleset":
                return new exports.Ruleset(name, undefined, { urn });
            case "cloudflare:index/spectrumApplication:SpectrumApplication":
                return new exports.SpectrumApplication(name, undefined, { urn });
            case "cloudflare:index/splitTunnel:SplitTunnel":
                return new exports.SplitTunnel(name, undefined, { urn });
            case "cloudflare:index/staticRoute:StaticRoute":
                return new exports.StaticRoute(name, undefined, { urn });
            case "cloudflare:index/teamsAccount:TeamsAccount":
                return new exports.TeamsAccount(name, undefined, { urn });
            case "cloudflare:index/teamsList:TeamsList":
                return new exports.TeamsList(name, undefined, { urn });
            case "cloudflare:index/teamsLocation:TeamsLocation":
                return new exports.TeamsLocation(name, undefined, { urn });
            case "cloudflare:index/teamsProxyEndpoint:TeamsProxyEndpoint":
                return new exports.TeamsProxyEndpoint(name, undefined, { urn });
            case "cloudflare:index/teamsRule:TeamsRule":
                return new exports.TeamsRule(name, undefined, { urn });
            case "cloudflare:index/tieredCache:TieredCache":
                return new exports.TieredCache(name, undefined, { urn });
            case "cloudflare:index/totalTls:TotalTls":
                return new exports.TotalTls(name, undefined, { urn });
            case "cloudflare:index/tunnel:Tunnel":
                return new exports.Tunnel(name, undefined, { urn });
            case "cloudflare:index/tunnelConfig:TunnelConfig":
                return new exports.TunnelConfig(name, undefined, { urn });
            case "cloudflare:index/tunnelRoute:TunnelRoute":
                return new exports.TunnelRoute(name, undefined, { urn });
            case "cloudflare:index/tunnelVirtualNetwork:TunnelVirtualNetwork":
                return new exports.TunnelVirtualNetwork(name, undefined, { urn });
            case "cloudflare:index/turnstileWidget:TurnstileWidget":
                return new exports.TurnstileWidget(name, undefined, { urn });
            case "cloudflare:index/urlNormalizationSettings:UrlNormalizationSettings":
                return new exports.UrlNormalizationSettings(name, undefined, { urn });
            case "cloudflare:index/userAgentBlockingRule:UserAgentBlockingRule":
                return new exports.UserAgentBlockingRule(name, undefined, { urn });
            case "cloudflare:index/waitingRoom:WaitingRoom":
                return new exports.WaitingRoom(name, undefined, { urn });
            case "cloudflare:index/waitingRoomEvent:WaitingRoomEvent":
                return new exports.WaitingRoomEvent(name, undefined, { urn });
            case "cloudflare:index/waitingRoomRules:WaitingRoomRules":
                return new exports.WaitingRoomRules(name, undefined, { urn });
            case "cloudflare:index/waitingRoomSettings:WaitingRoomSettings":
                return new exports.WaitingRoomSettings(name, undefined, { urn });
            case "cloudflare:index/web3Hostname:Web3Hostname":
                return new exports.Web3Hostname(name, undefined, { urn });
            case "cloudflare:index/webAnalyticsRule:WebAnalyticsRule":
                return new exports.WebAnalyticsRule(name, undefined, { urn });
            case "cloudflare:index/webAnalyticsSite:WebAnalyticsSite":
                return new exports.WebAnalyticsSite(name, undefined, { urn });
            case "cloudflare:index/workerCronTrigger:WorkerCronTrigger":
                return new exports.WorkerCronTrigger(name, undefined, { urn });
            case "cloudflare:index/workerDomain:WorkerDomain":
                return new exports.WorkerDomain(name, undefined, { urn });
            case "cloudflare:index/workerRoute:WorkerRoute":
                return new exports.WorkerRoute(name, undefined, { urn });
            case "cloudflare:index/workerScript:WorkerScript":
                return new exports.WorkerScript(name, undefined, { urn });
            case "cloudflare:index/workerSecret:WorkerSecret":
                return new exports.WorkerSecret(name, undefined, { urn });
            case "cloudflare:index/workersCronTrigger:WorkersCronTrigger":
                return new exports.WorkersCronTrigger(name, undefined, { urn });
            case "cloudflare:index/workersDomain:WorkersDomain":
                return new exports.WorkersDomain(name, undefined, { urn });
            case "cloudflare:index/workersForPlatformsDispatchNamespace:WorkersForPlatformsDispatchNamespace":
                return new exports.WorkersForPlatformsDispatchNamespace(name, undefined, { urn });
            case "cloudflare:index/workersForPlatformsNamespace:WorkersForPlatformsNamespace":
                return new exports.WorkersForPlatformsNamespace(name, undefined, { urn });
            case "cloudflare:index/workersKv:WorkersKv":
                return new exports.WorkersKv(name, undefined, { urn });
            case "cloudflare:index/workersKvNamespace:WorkersKvNamespace":
                return new exports.WorkersKvNamespace(name, undefined, { urn });
            case "cloudflare:index/workersRoute:WorkersRoute":
                return new exports.WorkersRoute(name, undefined, { urn });
            case "cloudflare:index/workersScript:WorkersScript":
                return new exports.WorkersScript(name, undefined, { urn });
            case "cloudflare:index/workersSecret:WorkersSecret":
                return new exports.WorkersSecret(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessApplication:ZeroTrustAccessApplication":
                return new exports.ZeroTrustAccessApplication(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessCustomPage:ZeroTrustAccessCustomPage":
                return new exports.ZeroTrustAccessCustomPage(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessGroup:ZeroTrustAccessGroup":
                return new exports.ZeroTrustAccessGroup(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessIdentityProvider:ZeroTrustAccessIdentityProvider":
                return new exports.ZeroTrustAccessIdentityProvider(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessMtlsCertificate:ZeroTrustAccessMtlsCertificate":
                return new exports.ZeroTrustAccessMtlsCertificate(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessMtlsHostnameSettings:ZeroTrustAccessMtlsHostnameSettings":
                return new exports.ZeroTrustAccessMtlsHostnameSettings(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessOrganization:ZeroTrustAccessOrganization":
                return new exports.ZeroTrustAccessOrganization(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessPolicy:ZeroTrustAccessPolicy":
                return new exports.ZeroTrustAccessPolicy(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessServiceToken:ZeroTrustAccessServiceToken":
                return new exports.ZeroTrustAccessServiceToken(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessShortLivedCertificate:ZeroTrustAccessShortLivedCertificate":
                return new exports.ZeroTrustAccessShortLivedCertificate(name, undefined, { urn });
            case "cloudflare:index/zeroTrustAccessTag:ZeroTrustAccessTag":
                return new exports.ZeroTrustAccessTag(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceCertificates:ZeroTrustDeviceCertificates":
                return new exports.ZeroTrustDeviceCertificates(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceManagedNetworks:ZeroTrustDeviceManagedNetworks":
                return new exports.ZeroTrustDeviceManagedNetworks(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDevicePostureIntegration:ZeroTrustDevicePostureIntegration":
                return new exports.ZeroTrustDevicePostureIntegration(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDevicePostureRule:ZeroTrustDevicePostureRule":
                return new exports.ZeroTrustDevicePostureRule(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDeviceProfiles:ZeroTrustDeviceProfiles":
                return new exports.ZeroTrustDeviceProfiles(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDexTest:ZeroTrustDexTest":
                return new exports.ZeroTrustDexTest(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDlpProfile:ZeroTrustDlpProfile":
                return new exports.ZeroTrustDlpProfile(name, undefined, { urn });
            case "cloudflare:index/zeroTrustDnsLocation:ZeroTrustDnsLocation":
                return new exports.ZeroTrustDnsLocation(name, undefined, { urn });
            case "cloudflare:index/zeroTrustGatewayPolicy:ZeroTrustGatewayPolicy":
                return new exports.ZeroTrustGatewayPolicy(name, undefined, { urn });
            case "cloudflare:index/zeroTrustGatewayProxyEndpoint:ZeroTrustGatewayProxyEndpoint":
                return new exports.ZeroTrustGatewayProxyEndpoint(name, undefined, { urn });
            case "cloudflare:index/zeroTrustGatewaySettings:ZeroTrustGatewaySettings":
                return new exports.ZeroTrustGatewaySettings(name, undefined, { urn });
            case "cloudflare:index/zeroTrustKeyAccessKeyConfiguration:ZeroTrustKeyAccessKeyConfiguration":
                return new exports.ZeroTrustKeyAccessKeyConfiguration(name, undefined, { urn });
            case "cloudflare:index/zeroTrustList:ZeroTrustList":
                return new exports.ZeroTrustList(name, undefined, { urn });
            case "cloudflare:index/zeroTrustLocalFallbackDomain:ZeroTrustLocalFallbackDomain":
                return new exports.ZeroTrustLocalFallbackDomain(name, undefined, { urn });
            case "cloudflare:index/zeroTrustRiskBehavior:ZeroTrustRiskBehavior":
                return new exports.ZeroTrustRiskBehavior(name, undefined, { urn });
            case "cloudflare:index/zeroTrustRiskScoreIntegration:ZeroTrustRiskScoreIntegration":
                return new exports.ZeroTrustRiskScoreIntegration(name, undefined, { urn });
            case "cloudflare:index/zeroTrustSplitTunnel:ZeroTrustSplitTunnel":
                return new exports.ZeroTrustSplitTunnel(name, undefined, { urn });
            case "cloudflare:index/zeroTrustTunnelCloudflared:ZeroTrustTunnelCloudflared":
                return new exports.ZeroTrustTunnelCloudflared(name, undefined, { urn });
            case "cloudflare:index/zeroTrustTunnelCloudflaredConfig:ZeroTrustTunnelCloudflaredConfig":
                return new exports.ZeroTrustTunnelCloudflaredConfig(name, undefined, { urn });
            case "cloudflare:index/zeroTrustTunnelRoute:ZeroTrustTunnelRoute":
                return new exports.ZeroTrustTunnelRoute(name, undefined, { urn });
            case "cloudflare:index/zeroTrustTunnelVirtualNetwork:ZeroTrustTunnelVirtualNetwork":
                return new exports.ZeroTrustTunnelVirtualNetwork(name, undefined, { urn });
            case "cloudflare:index/zone:Zone":
                return new exports.Zone(name, undefined, { urn });
            case "cloudflare:index/zoneCacheReserve:ZoneCacheReserve":
                return new exports.ZoneCacheReserve(name, undefined, { urn });
            case "cloudflare:index/zoneCacheVariants:ZoneCacheVariants":
                return new exports.ZoneCacheVariants(name, undefined, { urn });
            case "cloudflare:index/zoneDnssec:ZoneDnssec":
                return new exports.ZoneDnssec(name, undefined, { urn });
            case "cloudflare:index/zoneHold:ZoneHold":
                return new exports.ZoneHold(name, undefined, { urn });
            case "cloudflare:index/zoneLockdown:ZoneLockdown":
                return new exports.ZoneLockdown(name, undefined, { urn });
            case "cloudflare:index/zoneSettingsOverride:ZoneSettingsOverride":
                return new exports.ZoneSettingsOverride(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudflare", "index/accessApplication", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessCaCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessCustomPage", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessGroup", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessIdentityProvider", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessKeysConfiguration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessMutualTlsCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessMutualTlsHostnameSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessOrganization", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessServiceToken", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accessTag", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/account", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/accountMember", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/addressMap", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShield", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldOperation", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldOperationSchemaValidationSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldSchema", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiShieldSchemaValidationSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/apiToken", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/argo", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/authenticatedOriginPulls", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/authenticatedOriginPullsCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/botManagement", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/byoIpPrefix", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/certificatePack", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/customHostname", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/customHostnameFallbackOrigin", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/customPages", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/customSsl", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/d1Database", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/deviceDexTest", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/deviceManagedNetworks", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/devicePolicyCertificates", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/devicePostureIntegration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/devicePostureRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/deviceSettingsPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/dlpProfile", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingAddress", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingCatchAll", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/emailRoutingSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/fallbackDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/filter", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/firewallRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/greTunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/healthcheck", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/hostnameTlsSetting", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/hostnameTlsSettingCiphers", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/hyperdriveConfig", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/ipsecTunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/keylessCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/list", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/listItem", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancer", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancerMonitor", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/loadBalancerPool", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/logpullRetention", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/logpushJob", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/logpushOwnershipChallenge", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicFirewallRuleset", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicWanGreTunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicWanIpsecTunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/magicWanStaticRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/managedHeaders", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/mtlsCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/notificationPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/notificationPolicyWebhooks", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/observatoryScheduledTest", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/originCaCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/pageRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/pagesDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/pagesProject", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/queue", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/r2Bucket", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/rateLimit", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/record", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/regionalHostname", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/regionalTieredCache", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/riskBehavior", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/ruleset", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/spectrumApplication", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/splitTunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/staticRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsAccount", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsList", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsLocation", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsProxyEndpoint", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/teamsRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tieredCache", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/totalTls", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnelConfig", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnelRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/tunnelVirtualNetwork", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/turnstileWidget", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/urlNormalizationSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/userAgentBlockingRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoom", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoomEvent", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoomRules", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/waitingRoomSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/web3Hostname", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/webAnalyticsRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/webAnalyticsSite", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workerCronTrigger", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workerDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workerRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workerScript", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workerSecret", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersCronTrigger", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersForPlatformsDispatchNamespace", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersForPlatformsNamespace", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersKv", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersKvNamespace", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersScript", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/workersSecret", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessApplication", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessCustomPage", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessGroup", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessIdentityProvider", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessMtlsCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessMtlsHostnameSettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessOrganization", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessServiceToken", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessShortLivedCertificate", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustAccessTag", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceCertificates", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceManagedNetworks", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDevicePostureIntegration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDevicePostureRule", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDeviceProfiles", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDexTest", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDlpProfile", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustDnsLocation", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustGatewayPolicy", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustGatewayProxyEndpoint", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustGatewaySettings", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustKeyAccessKeyConfiguration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustList", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustLocalFallbackDomain", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustRiskBehavior", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustRiskScoreIntegration", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustSplitTunnel", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustTunnelCloudflared", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustTunnelCloudflaredConfig", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustTunnelRoute", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zeroTrustTunnelVirtualNetwork", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zone", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneCacheReserve", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneCacheVariants", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneDnssec", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneHold", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneLockdown", _module);
pulumi.runtime.registerResourceModule("cloudflare", "index/zoneSettingsOverride", _module);
pulumi.runtime.registerResourcePackage("cloudflare", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:cloudflare") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map