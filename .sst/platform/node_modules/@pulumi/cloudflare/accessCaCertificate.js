"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessCaCertificate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Cloudflare Access can replace traditional SSH key models with
 * short-lived certificates issued to your users based on the token
 * generated by their Access login.
 *
 * > It's required that an `accountId` or `zoneId` is provided and in
 *    most cases using either is fine. However, if you're using a scoped
 *    access token, you must provide the argument that matches the token's
 *    scope. For example, an access token that is scoped to the "example.com"
 *    zone needs to use the `zoneId` argument.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * // account level
 * const example = new cloudflare.AccessCaCertificate("example", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     applicationId: "6cd6cea3-3ef2-4542-9aea-85a0bbcd5414",
 * });
 * // zone level
 * const anotherExample = new cloudflare.AccessCaCertificate("another_example", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     applicationId: "fe2be0ff-7f13-4350-8c8e-a9b9795fe3c2",
 * });
 * ```
 *
 * ## Import
 *
 * Account level CA certificate import.
 *
 * ```sh
 * $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/<account_id>/<application_id>
 * ```
 *
 * Zone level CA certificate import.
 *
 * ```sh
 * $ pulumi import cloudflare:index/accessCaCertificate:AccessCaCertificate example account/<zone_id>/<application_id>
 * ```
 */
class AccessCaCertificate extends pulumi.CustomResource {
    /**
     * Get an existing AccessCaCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AccessCaCertificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccessCaCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessCaCertificate.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["aud"] = state ? state.aud : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["aud"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessCaCertificate.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AccessCaCertificate = AccessCaCertificate;
/** @internal */
AccessCaCertificate.__pulumiType = 'cloudflare:index/accessCaCertificate:AccessCaCertificate';
//# sourceMappingURL=accessCaCertificate.js.map