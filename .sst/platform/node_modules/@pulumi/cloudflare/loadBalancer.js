"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadBalancer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Cloudflare Load Balancer resource. This sits in front of
 * a number of defined pools of origins and provides various options
 * for geographically-aware load balancing. Note that the load balancing
 * feature must be enabled in your Cloudflare account before you can use
 * this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const exampleLoadBalancerPool = new cloudflare.LoadBalancerPool("example", {
 *     name: "example-lb-pool",
 *     origins: [{
 *         name: "example-1",
 *         address: "192.0.2.1",
 *         enabled: false,
 *     }],
 * });
 * // Define a load balancer which always points to a pool we define below.
 * // In normal usage, would have different pools set for different pops
 * // (cloudflare points-of-presence) and/or for different regions.
 * // Within each pop or region we can define multiple pools in failover order.
 * const example = new cloudflare.LoadBalancer("example", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     name: "example-load-balancer.example.com",
 *     fallbackPoolId: exampleLoadBalancerPool.id,
 *     defaultPoolIds: [exampleLoadBalancerPool.id],
 *     description: "example load balancer using geo-balancing",
 *     proxied: true,
 *     steeringPolicy: "geo",
 *     popPools: [{
 *         pop: "LAX",
 *         poolIds: [exampleLoadBalancerPool.id],
 *     }],
 *     countryPools: [{
 *         country: "US",
 *         poolIds: [exampleLoadBalancerPool.id],
 *     }],
 *     regionPools: [{
 *         region: "WNAM",
 *         poolIds: [exampleLoadBalancerPool.id],
 *     }],
 *     rules: [{
 *         name: "example rule",
 *         condition: "http.request.uri.path contains \"testing\"",
 *         fixedResponse: {
 *             messageBody: "hello",
 *             statusCode: 200,
 *             contentType: "html",
 *             location: "www.example.com",
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/loadBalancer:LoadBalancer example <zone_id>/<load_balancer_id>
 * ```
 */
class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LoadBalancer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["adaptiveRoutings"] = state ? state.adaptiveRoutings : undefined;
            resourceInputs["countryPools"] = state ? state.countryPools : undefined;
            resourceInputs["createdOn"] = state ? state.createdOn : undefined;
            resourceInputs["defaultPoolIds"] = state ? state.defaultPoolIds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fallbackPoolId"] = state ? state.fallbackPoolId : undefined;
            resourceInputs["locationStrategies"] = state ? state.locationStrategies : undefined;
            resourceInputs["modifiedOn"] = state ? state.modifiedOn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["popPools"] = state ? state.popPools : undefined;
            resourceInputs["proxied"] = state ? state.proxied : undefined;
            resourceInputs["randomSteerings"] = state ? state.randomSteerings : undefined;
            resourceInputs["regionPools"] = state ? state.regionPools : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["sessionAffinity"] = state ? state.sessionAffinity : undefined;
            resourceInputs["sessionAffinityAttributes"] = state ? state.sessionAffinityAttributes : undefined;
            resourceInputs["sessionAffinityTtl"] = state ? state.sessionAffinityTtl : undefined;
            resourceInputs["steeringPolicy"] = state ? state.steeringPolicy : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.defaultPoolIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultPoolIds'");
            }
            if ((!args || args.fallbackPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fallbackPoolId'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["adaptiveRoutings"] = args ? args.adaptiveRoutings : undefined;
            resourceInputs["countryPools"] = args ? args.countryPools : undefined;
            resourceInputs["defaultPoolIds"] = args ? args.defaultPoolIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fallbackPoolId"] = args ? args.fallbackPoolId : undefined;
            resourceInputs["locationStrategies"] = args ? args.locationStrategies : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["popPools"] = args ? args.popPools : undefined;
            resourceInputs["proxied"] = args ? args.proxied : undefined;
            resourceInputs["randomSteerings"] = args ? args.randomSteerings : undefined;
            resourceInputs["regionPools"] = args ? args.regionPools : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["sessionAffinity"] = args ? args.sessionAffinity : undefined;
            resourceInputs["sessionAffinityAttributes"] = args ? args.sessionAffinityAttributes : undefined;
            resourceInputs["sessionAffinityTtl"] = args ? args.sessionAffinityTtl : undefined;
            resourceInputs["steeringPolicy"] = args ? args.steeringPolicy : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdOn"] = undefined /*out*/;
            resourceInputs["modifiedOn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LoadBalancer = LoadBalancer;
/** @internal */
LoadBalancer.__pulumiType = 'cloudflare:index/loadBalancer:LoadBalancer';
//# sourceMappingURL=loadBalancer.js.map