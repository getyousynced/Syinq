import * as pulumi from "@pulumi/pulumi";
/**
 * Define Firewall rules using filter expressions for more control over
 * how traffic is matched to the rule. A filter expression permits
 * selecting traffic by multiple criteria allowing greater freedom in
 * rule creation.
 *
 * Filter expressions needs to be created first before using Firewall
 * Rule.
 *
 * > `cloudflare.FirewallRule` is in a deprecation phase until January 15th, 2025.
 *   During this time period, this resource is still
 *   fully supported but you are strongly advised  to move to the
 *   `cloudflare.Ruleset` resource. Full details can be found in the
 *   developer documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const wordpress = new cloudflare.Filter("wordpress", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     description: "Wordpress break-in attempts that are outside of the office",
 *     expression: "(http.request.uri.path ~ \".*wp-login.php\" or http.request.uri.path ~ \".*xmlrpc.php\") and ip.src ne 192.0.2.1",
 * });
 * const wordpressFirewallRule = new cloudflare.FirewallRule("wordpress", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     description: "Block wordpress break-in attempts",
 *     filterId: wordpress.id,
 *     action: "block",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/firewallRule:FirewallRule example <zone_id>/<firewall_rule_id>
 * ```
 */
export declare class FirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallRuleState, opts?: pulumi.CustomResourceOptions): FirewallRule;
    /**
     * Returns true if the given object is an instance of FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FirewallRule;
    /**
     * The action to apply to a matched request. Available values: `block`, `challenge`, `allow`, `jsChallenge`, `managedChallenge`, `log`, `bypass`.
     */
    readonly action: pulumi.Output<string>;
    /**
     * A description of the rule to help identify it.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The identifier of the Filter to use for determining if the Firewall Rule should be triggered.
     */
    readonly filterId: pulumi.Output<string>;
    /**
     * Whether this filter based firewall rule is currently paused.
     */
    readonly paused: pulumi.Output<boolean | undefined>;
    /**
     * The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
     */
    readonly priority: pulumi.Output<number | undefined>;
    /**
     * List of products to bypass for a request when the bypass action is used. Available values: `zoneLockdown`, `uaBlock`, `bic`, `hot`, `securityLevel`, `rateLimit`, `waf`.
     */
    readonly products: pulumi.Output<string[] | undefined>;
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    readonly zoneId: pulumi.Output<string>;
    /**
     * Create a FirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallRuleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering FirewallRule resources.
 */
export interface FirewallRuleState {
    /**
     * The action to apply to a matched request. Available values: `block`, `challenge`, `allow`, `jsChallenge`, `managedChallenge`, `log`, `bypass`.
     */
    action?: pulumi.Input<string>;
    /**
     * A description of the rule to help identify it.
     */
    description?: pulumi.Input<string>;
    /**
     * The identifier of the Filter to use for determining if the Firewall Rule should be triggered.
     */
    filterId?: pulumi.Input<string>;
    /**
     * Whether this filter based firewall rule is currently paused.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
     */
    priority?: pulumi.Input<number>;
    /**
     * List of products to bypass for a request when the bypass action is used. Available values: `zoneLockdown`, `uaBlock`, `bic`, `hot`, `securityLevel`, `rateLimit`, `waf`.
     */
    products?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a FirewallRule resource.
 */
export interface FirewallRuleArgs {
    /**
     * The action to apply to a matched request. Available values: `block`, `challenge`, `allow`, `jsChallenge`, `managedChallenge`, `log`, `bypass`.
     */
    action: pulumi.Input<string>;
    /**
     * A description of the rule to help identify it.
     */
    description?: pulumi.Input<string>;
    /**
     * The identifier of the Filter to use for determining if the Firewall Rule should be triggered.
     */
    filterId: pulumi.Input<string>;
    /**
     * Whether this filter based firewall rule is currently paused.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The priority of the rule to allow control of processing order. A lower number indicates high priority. If not provided, any rules with a priority will be sequenced before those without.
     */
    priority?: pulumi.Input<number>;
    /**
     * List of products to bypass for a request when the bypass action is used. Available values: `zoneLockdown`, `uaBlock`, `bic`, `hot`, `securityLevel`, `rateLimit`, `waf`.
     */
    products?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The zone identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    zoneId: pulumi.Input<string>;
}
