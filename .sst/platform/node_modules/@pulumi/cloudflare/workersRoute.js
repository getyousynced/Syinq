"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkersRoute = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Cloudflare worker route resource. A route will also require a `cloudflare.WorkerScript`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const myScript = new cloudflare.WorkersScript("my_script", {});
 * // Runs the specified worker script for all URLs that match `example.com/*`
 * const myRoute = new cloudflare.WorkersRoute("my_route", {
 *     zoneId: "0da42c8d2132a9ddaf714f9e7c920711",
 *     pattern: "example.com/*",
 *     scriptName: myScript.name,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/workersRoute:WorkersRoute example <zone_id>/<route_id>
 * ```
 */
class WorkersRoute extends pulumi.CustomResource {
    /**
     * Get an existing WorkersRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WorkersRoute(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WorkersRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WorkersRoute.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["scriptName"] = state ? state.scriptName : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.pattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pattern'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["scriptName"] = args ? args.scriptName : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WorkersRoute.__pulumiType, name, resourceInputs, opts);
    }
}
exports.WorkersRoute = WorkersRoute;
/** @internal */
WorkersRoute.__pulumiType = 'cloudflare:index/workersRoute:WorkersRoute';
//# sourceMappingURL=workersRoute.js.map