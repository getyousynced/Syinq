"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroTrustGatewaySettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Cloudflare Teams Account resource. The Teams Account
 * resource defines configuration for secure web gateway.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.ZeroTrustGatewaySettings("example", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     tlsDecryptEnabled: true,
 *     protocolDetectionEnabled: true,
 *     blockPage: {
 *         footerText: "hello",
 *         headerText: "hello",
 *         logoPath: "https://example.com/logo.jpg",
 *         backgroundColor: "#000000",
 *     },
 *     bodyScanning: {
 *         inspectionMode: "deep",
 *     },
 *     antivirus: {
 *         enabledDownloadPhase: true,
 *         enabledUploadPhase: false,
 *         failClosed: true,
 *         notificationSettings: {
 *             enabled: true,
 *             message: "you are blocked",
 *             supportUrl: "https://example.com/blocked",
 *         },
 *     },
 *     fips: {
 *         tls: true,
 *     },
 *     proxy: {
 *         tcp: true,
 *         udp: true,
 *         rootCa: true,
 *         virtualIp: false,
 *     },
 *     urlBrowserIsolationEnabled: true,
 *     logging: {
 *         redactPii: true,
 *         settingsByRuleType: {
 *             dns: {
 *                 logAll: false,
 *                 logBlocks: true,
 *             },
 *             http: {
 *                 logAll: true,
 *                 logBlocks: true,
 *             },
 *             l4: {
 *                 logAll: false,
 *                 logBlocks: true,
 *             },
 *         },
 *     },
 *     extendedEmailMatching: {
 *         enabled: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/zeroTrustGatewaySettings:ZeroTrustGatewaySettings example <account_id>
 * ```
 */
class ZeroTrustGatewaySettings extends pulumi.CustomResource {
    /**
     * Get an existing ZeroTrustGatewaySettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ZeroTrustGatewaySettings(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ZeroTrustGatewaySettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZeroTrustGatewaySettings.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["activityLogEnabled"] = state ? state.activityLogEnabled : undefined;
            resourceInputs["antivirus"] = state ? state.antivirus : undefined;
            resourceInputs["blockPage"] = state ? state.blockPage : undefined;
            resourceInputs["bodyScanning"] = state ? state.bodyScanning : undefined;
            resourceInputs["customCertificate"] = state ? state.customCertificate : undefined;
            resourceInputs["extendedEmailMatching"] = state ? state.extendedEmailMatching : undefined;
            resourceInputs["fips"] = state ? state.fips : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["nonIdentityBrowserIsolationEnabled"] = state ? state.nonIdentityBrowserIsolationEnabled : undefined;
            resourceInputs["payloadLog"] = state ? state.payloadLog : undefined;
            resourceInputs["protocolDetectionEnabled"] = state ? state.protocolDetectionEnabled : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["sshSessionLog"] = state ? state.sshSessionLog : undefined;
            resourceInputs["tlsDecryptEnabled"] = state ? state.tlsDecryptEnabled : undefined;
            resourceInputs["urlBrowserIsolationEnabled"] = state ? state.urlBrowserIsolationEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["activityLogEnabled"] = args ? args.activityLogEnabled : undefined;
            resourceInputs["antivirus"] = args ? args.antivirus : undefined;
            resourceInputs["blockPage"] = args ? args.blockPage : undefined;
            resourceInputs["bodyScanning"] = args ? args.bodyScanning : undefined;
            resourceInputs["customCertificate"] = args ? args.customCertificate : undefined;
            resourceInputs["extendedEmailMatching"] = args ? args.extendedEmailMatching : undefined;
            resourceInputs["fips"] = args ? args.fips : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["nonIdentityBrowserIsolationEnabled"] = args ? args.nonIdentityBrowserIsolationEnabled : undefined;
            resourceInputs["payloadLog"] = args ? args.payloadLog : undefined;
            resourceInputs["protocolDetectionEnabled"] = args ? args.protocolDetectionEnabled : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["sshSessionLog"] = args ? args.sshSessionLog : undefined;
            resourceInputs["tlsDecryptEnabled"] = args ? args.tlsDecryptEnabled : undefined;
            resourceInputs["urlBrowserIsolationEnabled"] = args ? args.urlBrowserIsolationEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZeroTrustGatewaySettings.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ZeroTrustGatewaySettings = ZeroTrustGatewaySettings;
/** @internal */
ZeroTrustGatewaySettings.__pulumiType = 'cloudflare:index/zeroTrustGatewaySettings:ZeroTrustGatewaySettings';
//# sourceMappingURL=zeroTrustGatewaySettings.js.map