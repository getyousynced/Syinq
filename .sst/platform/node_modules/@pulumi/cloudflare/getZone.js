"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getZoneOutput = exports.getZone = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Use this data source to look up [zone](https://api.cloudflare.com/#zone-properties)
 * info. This is the singular alternative to `cloudflare.getZones`.
 *
 * > **Note** Cloudflare zone names **are not unique**. It is possible for multiple
 * accounts to have the same zone created but in different states. If you are
 * using this setup, it is advised to use the `accountId` attribute on this
 * resource or swap to `cloudflare.getZones` to further filter the results.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = cloudflare.getZone({
 *     name: "example.com",
 * });
 * const exampleRecord = new cloudflare.Record("example", {
 *     zoneId: example.then(example => example.id),
 *     name: "www",
 *     content: "203.0.113.1",
 *     type: "A",
 *     proxied: true,
 * });
 * ```
 */
function getZone(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudflare:index/getZone:getZone", {
        "accountId": args.accountId,
        "name": args.name,
        "zoneId": args.zoneId,
    }, opts);
}
exports.getZone = getZone;
/**
 * Use this data source to look up [zone](https://api.cloudflare.com/#zone-properties)
 * info. This is the singular alternative to `cloudflare.getZones`.
 *
 * > **Note** Cloudflare zone names **are not unique**. It is possible for multiple
 * accounts to have the same zone created but in different states. If you are
 * using this setup, it is advised to use the `accountId` attribute on this
 * resource or swap to `cloudflare.getZones` to further filter the results.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = cloudflare.getZone({
 *     name: "example.com",
 * });
 * const exampleRecord = new cloudflare.Record("example", {
 *     zoneId: example.then(example => example.id),
 *     name: "www",
 *     content: "203.0.113.1",
 *     type: "A",
 *     proxied: true,
 * });
 * ```
 */
function getZoneOutput(args, opts) {
    return pulumi.output(args).apply((a) => getZone(a, opts));
}
exports.getZoneOutput = getZoneOutput;
//# sourceMappingURL=getZone.js.map