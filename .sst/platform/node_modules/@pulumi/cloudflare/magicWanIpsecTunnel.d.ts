import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a resource, that manages IPsec tunnels for Magic Transit.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cloudflare from "@pulumi/cloudflare";
 *
 * const example = new cloudflare.MagicWanIpsecTunnel("example", {
 *     accountId: "f037e56e89293a057740de681ac9abbe",
 *     name: "IPsec_1",
 *     customerEndpoint: "203.0.113.1",
 *     cloudflareEndpoint: "203.0.113.1",
 *     interfaceAddress: "192.0.2.0/31",
 *     description: "Tunnel for ISP X",
 *     healthCheckEnabled: true,
 *     healthCheckTarget: "203.0.113.1",
 *     healthCheckType: "reply",
 *     psk: "asdf12341234",
 *     allowNullCipher: false,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import cloudflare:index/magicWanIpsecTunnel:MagicWanIpsecTunnel example <account_id>/<tunnel_id>
 * ```
 */
export declare class MagicWanIpsecTunnel extends pulumi.CustomResource {
    /**
     * Get an existing MagicWanIpsecTunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MagicWanIpsecTunnelState, opts?: pulumi.CustomResourceOptions): MagicWanIpsecTunnel;
    /**
     * Returns true if the given object is an instance of MagicWanIpsecTunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MagicWanIpsecTunnel;
    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    readonly accountId: pulumi.Output<string | undefined>;
    /**
     * Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
     */
    readonly allowNullCipher: pulumi.Output<boolean | undefined>;
    /**
     * IP address assigned to the Cloudflare side of the IPsec tunnel.
     */
    readonly cloudflareEndpoint: pulumi.Output<string>;
    /**
     * IP address assigned to the customer side of the IPsec tunnel.
     */
    readonly customerEndpoint: pulumi.Output<string>;
    /**
     * An optional description of the IPsec tunnel.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * `remoteId` in the form of a fqdn. This value is generated by cloudflare.
     */
    readonly fqdnId: pulumi.Output<string>;
    /**
     * Specifies the direction for the health check. Available values: `unidirectional`, `bidirectional` Default: `unidirectional`.
     */
    readonly healthCheckDirection: pulumi.Output<string>;
    /**
     * Specifies if ICMP tunnel health checks are enabled. Default: `true`.
     */
    readonly healthCheckEnabled: pulumi.Output<boolean>;
    /**
     * Specifies the ICMP rate for the health check. Available values: `low`, `mid`, `high` Default: `mid`.
     */
    readonly healthCheckRate: pulumi.Output<string>;
    /**
     * The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
     */
    readonly healthCheckTarget: pulumi.Output<string>;
    /**
     * Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
     */
    readonly healthCheckType: pulumi.Output<string>;
    /**
     * `remoteId` as a hex string. This value is generated by cloudflare.
     */
    readonly hexId: pulumi.Output<string>;
    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     */
    readonly interfaceAddress: pulumi.Output<string>;
    /**
     * Name of the IPsec tunnel.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
     */
    readonly psk: pulumi.Output<string>;
    /**
     * ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
     */
    readonly remoteId: pulumi.Output<string>;
    /**
     * Specifies if replay protection is enabled. Defaults to `false`.
     */
    readonly replayProtection: pulumi.Output<boolean | undefined>;
    /**
     * `remoteId` in the form of an email address. This value is generated by cloudflare.
     */
    readonly userId: pulumi.Output<string>;
    /**
     * Create a MagicWanIpsecTunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MagicWanIpsecTunnelArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering MagicWanIpsecTunnel resources.
 */
export interface MagicWanIpsecTunnelState {
    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    accountId?: pulumi.Input<string>;
    /**
     * Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
     */
    allowNullCipher?: pulumi.Input<boolean>;
    /**
     * IP address assigned to the Cloudflare side of the IPsec tunnel.
     */
    cloudflareEndpoint?: pulumi.Input<string>;
    /**
     * IP address assigned to the customer side of the IPsec tunnel.
     */
    customerEndpoint?: pulumi.Input<string>;
    /**
     * An optional description of the IPsec tunnel.
     */
    description?: pulumi.Input<string>;
    /**
     * `remoteId` in the form of a fqdn. This value is generated by cloudflare.
     */
    fqdnId?: pulumi.Input<string>;
    /**
     * Specifies the direction for the health check. Available values: `unidirectional`, `bidirectional` Default: `unidirectional`.
     */
    healthCheckDirection?: pulumi.Input<string>;
    /**
     * Specifies if ICMP tunnel health checks are enabled. Default: `true`.
     */
    healthCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ICMP rate for the health check. Available values: `low`, `mid`, `high` Default: `mid`.
     */
    healthCheckRate?: pulumi.Input<string>;
    /**
     * The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
     */
    healthCheckTarget?: pulumi.Input<string>;
    /**
     * Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * `remoteId` as a hex string. This value is generated by cloudflare.
     */
    hexId?: pulumi.Input<string>;
    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     */
    interfaceAddress?: pulumi.Input<string>;
    /**
     * Name of the IPsec tunnel.
     */
    name?: pulumi.Input<string>;
    /**
     * Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
     */
    psk?: pulumi.Input<string>;
    /**
     * ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
     */
    remoteId?: pulumi.Input<string>;
    /**
     * Specifies if replay protection is enabled. Defaults to `false`.
     */
    replayProtection?: pulumi.Input<boolean>;
    /**
     * `remoteId` in the form of an email address. This value is generated by cloudflare.
     */
    userId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a MagicWanIpsecTunnel resource.
 */
export interface MagicWanIpsecTunnelArgs {
    /**
     * The account identifier to target for the resource. **Modifying this attribute will force creation of a new resource.**
     */
    accountId?: pulumi.Input<string>;
    /**
     * Specifies if this tunnel may use a null cipher (ENCR_NULL) in Phase 2. Defaults to `false`.
     */
    allowNullCipher?: pulumi.Input<boolean>;
    /**
     * IP address assigned to the Cloudflare side of the IPsec tunnel.
     */
    cloudflareEndpoint: pulumi.Input<string>;
    /**
     * IP address assigned to the customer side of the IPsec tunnel.
     */
    customerEndpoint: pulumi.Input<string>;
    /**
     * An optional description of the IPsec tunnel.
     */
    description?: pulumi.Input<string>;
    /**
     * `remoteId` in the form of a fqdn. This value is generated by cloudflare.
     */
    fqdnId?: pulumi.Input<string>;
    /**
     * Specifies the direction for the health check. Available values: `unidirectional`, `bidirectional` Default: `unidirectional`.
     */
    healthCheckDirection?: pulumi.Input<string>;
    /**
     * Specifies if ICMP tunnel health checks are enabled. Default: `true`.
     */
    healthCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ICMP rate for the health check. Available values: `low`, `mid`, `high` Default: `mid`.
     */
    healthCheckRate?: pulumi.Input<string>;
    /**
     * The IP address of the customer endpoint that will receive tunnel health checks. Default: `<customer_gre_endpoint>`.
     */
    healthCheckTarget?: pulumi.Input<string>;
    /**
     * Specifies the ICMP echo type for the health check (`request` or `reply`). Available values: `request`, `reply` Default: `reply`.
     */
    healthCheckType?: pulumi.Input<string>;
    /**
     * `remoteId` as a hex string. This value is generated by cloudflare.
     */
    hexId?: pulumi.Input<string>;
    /**
     * 31-bit prefix (/31 in CIDR notation) supporting 2 hosts, one for each side of the tunnel.
     */
    interfaceAddress: pulumi.Input<string>;
    /**
     * Name of the IPsec tunnel.
     */
    name: pulumi.Input<string>;
    /**
     * Pre shared key to be used with the IPsec tunnel. If left unset, it will be autogenerated.
     */
    psk?: pulumi.Input<string>;
    /**
     * ID to be used while setting up the IPsec tunnel. This value is generated by cloudflare.
     */
    remoteId?: pulumi.Input<string>;
    /**
     * Specifies if replay protection is enabled. Defaults to `false`.
     */
    replayProtection?: pulumi.Input<boolean>;
    /**
     * `remoteId` in the form of an email address. This value is generated by cloudflare.
     */
    userId?: pulumi.Input<string>;
}
